[pytest]
# Test discovery
testpaths = .
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution
addopts =
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --capture=no
    --maxfail=5

# Test markers
markers =
    smoke: Quick smoke tests (deselect with '-m "not smoke"')
    auth: Authentication related tests
    api: API endpoint tests
    integration: Full integration tests
    performance: Performance and load tests
    security: Security related tests
    resilience: Resilience and recovery tests
    slow: Tests that take significant time
    requires_db: Tests that require database
    requires_redis: Tests that require Redis
    requires_docker: Tests that require Docker

# Test coverage
[coverage:run]
source = .
omit =
    */tests/*
    */test_*
    */venv/*
    */virtualenv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

# Logging
[tool:pytest]
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout
timeout = 300
timeout_method = thread

# Asyncio
asyncio_mode = auto

# Parallel execution (optional)
# -n auto (requires pytest-xdist)
