{"version":3,"file":"SimpleAnalysis-DJ4IHNdG.js","sources":["../../node_modules/lucide-react/dist/esm/icons/chevron-left.js","../../node_modules/lucide-react/dist/esm/icons/chevron-right.js","../../src/pages/SimpleAnalysis.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.364.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronLeft = createLucideIcon(\"ChevronLeft\", [\n  [\"path\", { d: \"m15 18-6-6 6-6\", key: \"1wnfg3\" }]\n]);\n\nexport { ChevronLeft as default };\n//# sourceMappingURL=chevron-left.js.map\n","/**\n * @license lucide-react v0.364.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronRight = createLucideIcon(\"ChevronRight\", [\n  [\"path\", { d: \"m9 18 6-6-6-6\", key: \"mthhwq\" }]\n]);\n\nexport { ChevronRight as default };\n//# sourceMappingURL=chevron-right.js.map\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { analyzePrompt, fetchAvailableModels } from '../services/api';\nimport {\n  CheckCircle,\n  ChevronRight,\n  ChevronLeft,\n  Loader2,\n  AlertCircle,\n  Copy,\n  RefreshCw,\n} from 'lucide-react';\n\ntype Step = 'intro' | 'prompt' | 'models' | 'pattern' | 'results';\n\n// Analysis pattern interface\ninterface AnalysisPattern {\n  key: string;\n  name: string;\n  description: string;\n}\n\n// Add interface for model responses\ninterface ModelResponse {\n  model: string;\n  response: string;\n}\n\nconst SimpleAnalysis: React.FC = () => {\n  // Basic state\n  const [prompt, setPrompt] = useState('');\n  const [output, setOutput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentStep, setCurrentStep] = useState<Step>('intro');\n\n  // Models state\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n  const [selectedModels, setSelectedModels] = useState<string[]>(['gpt-4']);\n  const [primaryModel, setPrimaryModel] = useState<string>('gpt-4');\n\n  // Analysis patterns from documentation\n  const [patterns, setPatterns] = useState<AnalysisPattern[]>([\n    {\n      key: 'gut',\n      name: 'Gut Check Analysis',\n      description:\n        'Rapid evaluation of different perspectives to identify the most likely correct answer',\n    },\n    {\n      key: 'confidence',\n      name: 'Confidence Analysis',\n      description:\n        'Evaluates the strength of each model response with confidence scoring',\n    },\n    {\n      key: 'critique',\n      name: 'Critique Analysis',\n      description:\n        \"Models critically evaluate each other's reasoning and answers\",\n    },\n    {\n      key: 'fact_check',\n      name: 'Fact Check Analysis',\n      description: 'Verifies factual accuracy and cites sources for claims',\n    },\n    {\n      key: 'perspective',\n      name: 'Perspective Analysis',\n      description: 'Examines a question from multiple analytical perspectives',\n    },\n    {\n      key: 'scenario',\n      name: 'Scenario Analysis',\n      description:\n        'Explores potential future outcomes and alternative possibilities',\n    },\n    {\n      key: 'stakeholder',\n      name: 'Stakeholder Vision',\n      description:\n        'Analyzes from multiple stakeholder perspectives to reveal diverse interests and needs',\n    },\n    {\n      key: 'systems',\n      name: 'Systems Mapper',\n      description:\n        'Maps complex system dynamics with feedback loops and leverage points',\n    },\n    {\n      key: 'time',\n      name: 'Time Horizon',\n      description:\n        'Analyzes across multiple time frames to balance short and long-term considerations',\n    },\n    {\n      key: 'innovation',\n      name: 'Innovation Bridge',\n      description:\n        'Uses cross-domain analogies to discover non-obvious patterns and solutions',\n    },\n  ]);\n\n  const [selectedPattern, setSelectedPattern] = useState<string>('gut');\n  const [modelsLoading, setModelsLoading] = useState(false);\n\n  // Add state for individual model responses\n  const [modelResponses, setModelResponses] = useState<ModelResponse[]>([]);\n\n  // Add state for analysis metrics\n  const [analysisMetrics, setAnalysisMetrics] = useState({\n    timeTaken: 0,\n    tokenCounts: {} as Record<string, number>,\n  });\n\n  // Add state for response view type\n  const [responseView, setResponseView] = useState<'combined' | 'sideBySide'>(\n    'sideBySide'\n  );\n\n  // Add reference to results section for scroll behavior\n  const resultsRef = React.useRef<HTMLDivElement>(null);\n\n  // Fetch available models\n  useEffect(() => {\n    const getModels = async () => {\n      setModelsLoading(true);\n      try {\n        const models = await fetchAvailableModels();\n        setAvailableModels(models);\n\n        // Set default selections if available in the fetched models\n        if (models.includes('gpt-4')) {\n          setSelectedModels(['gpt-4']);\n          setPrimaryModel('gpt-4');\n        } else if (models.length > 0) {\n          setSelectedModels([models[0]]);\n          setPrimaryModel(models[0]);\n        }\n      } catch (err) {\n        console.error('Failed to fetch models:', err);\n        // Fallback to some default models\n        setAvailableModels([\n          'gpt-4',\n          'gpt-3.5-turbo',\n          'claude-3-opus',\n          'claude-3-sonnet',\n          'claude-3-haiku',\n        ]);\n      } finally {\n        setModelsLoading(false);\n      }\n    };\n\n    getModels();\n  }, []);\n\n  // Handle model selection toggle\n  const toggleModel = (model: string) => {\n    if (selectedModels.includes(model)) {\n      // Don't allow deselecting the last model\n      if (selectedModels.length > 1) {\n        setSelectedModels(selectedModels.filter(m => m !== model));\n\n        // If removing the primary model, set a new one\n        if (primaryModel === model) {\n          setPrimaryModel(selectedModels.filter(m => m !== model)[0]);\n        }\n      }\n    } else {\n      setSelectedModels([...selectedModels, model]);\n    }\n  };\n\n  // Set primary model\n  const handlePrimaryModelChange = (model: string) => {\n    // Add to selected models if not already selected\n    if (!selectedModels.includes(model)) {\n      setSelectedModels([...selectedModels, model]);\n    }\n    setPrimaryModel(model);\n  };\n\n  // Handle pattern selection\n  const handlePatternChange = (pattern: string) => {\n    setSelectedPattern(pattern);\n  };\n\n  // Handle form submission (modified to include metrics)\n  const handleSubmit = async () => {\n    if (!prompt.trim()) {\n      setError('Please enter a prompt');\n      return;\n    }\n\n    if (selectedModels.length < 2) {\n      setError('Please select at least two models');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Prepare analysis payload\n      const payload = {\n        prompt,\n        selected_models: selectedModels,\n        ultra_model: primaryModel,\n        pattern: selectedPattern,\n        options: {},\n        output_format: 'txt',\n        userId: 'user-placeholder',\n      };\n\n      console.log('Sending analysis request:', payload);\n      const result = await analyzePrompt(payload);\n      // Ensure ultra_response is a string\n      const ultraResponse =\n        typeof result.ultra_response === 'string'\n          ? result.ultra_response\n          : typeof result.ultra_response === 'object'\n            ? JSON.stringify(result.ultra_response, null, 2)\n            : String(result.ultra_response || '');\n      setOutput(ultraResponse);\n\n      // Handle individual model responses\n      const individualResponses: ModelResponse[] = [];\n\n      // If the API returns individual model responses, use those\n      if (result.model_responses) {\n        for (const model in result.model_responses) {\n          // Handle both string and object formats for backwards compatibility\n          let response: string;\n          const modelResponseData = result.model_responses[model];\n\n          if (typeof modelResponseData === 'string') {\n            response = modelResponseData;\n          } else if (\n            modelResponseData &&\n            typeof modelResponseData === 'object'\n          ) {\n            // Try common response fields\n            response =\n              modelResponseData.content ||\n              modelResponseData.response ||\n              modelResponseData.text ||\n              modelResponseData.message ||\n              'Response format not recognized';\n\n            // If still object, stringify it properly\n            if (typeof response === 'object') {\n              response = JSON.stringify(response, null, 2);\n            }\n          } else {\n            response = `No response from ${model}`;\n          }\n\n          console.log(`Response from ${model}:`, response);\n\n          individualResponses.push({\n            model,\n            response: response,\n          });\n        }\n      } else {\n        // Mock responses for demonstration\n        for (const model of selectedModels) {\n          individualResponses.push({\n            model,\n            response: result.ultra_response\n              ? `${model}'s response (simulated): ${result.ultra_response.substring(0, 100)}...`\n              : `No response from ${model}`,\n          });\n        }\n      }\n\n      setModelResponses(individualResponses);\n\n      // Save performance metrics if available\n      if (result.performance) {\n        setAnalysisMetrics({\n          timeTaken: result.performance.total_time_seconds || 0,\n          tokenCounts: result.performance.token_counts || {},\n        });\n      }\n\n      setCurrentStep('results');\n\n      // Scroll to results after a brief delay\n      setTimeout(() => {\n        if (resultsRef.current) {\n          resultsRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n      }, 100);\n    } catch (err: any) {\n      setError(err.message || 'An error occurred during analysis');\n      console.error('Analysis error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle navigation between steps\n  const goToNextStep = () => {\n    if (currentStep === 'intro') setCurrentStep('prompt');\n    else if (currentStep === 'prompt') setCurrentStep('models');\n    else if (currentStep === 'models') setCurrentStep('pattern');\n    else if (currentStep === 'pattern') {\n      // Run the analysis when going to results\n      handleSubmit();\n    }\n  };\n\n  const goToPreviousStep = () => {\n    if (currentStep === 'pattern') setCurrentStep('models');\n    else if (currentStep === 'models') setCurrentStep('prompt');\n    else if (currentStep === 'prompt') setCurrentStep('intro');\n    else if (currentStep === 'results') setCurrentStep('pattern');\n  };\n\n  // Validate if we can proceed to the next step\n  const canProceed = () => {\n    if (currentStep === 'prompt' && !prompt.trim()) return false;\n    if (currentStep === 'models' && selectedModels.length === 0) return false;\n    return true;\n  };\n\n  // Format the model name for display\n  const formatModelName = (name: string): string => {\n    // Convert model IDs to readable names\n    const modelMap: Record<string, string> = {\n      gpt4o: 'GPT-4o',\n      gpt4turbo: 'GPT-4 Turbo',\n      claude37: 'Claude 3.7',\n      claude3opus: 'Claude 3 Opus',\n      gemini15: 'Gemini 1.5 Pro',\n      llama3: 'Llama 3',\n    };\n\n    return modelMap[name] || name;\n  };\n\n  // Copy response to clipboard\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    // Could add a toast notification here\n  };\n\n  // Retry analysis\n  const retryAnalysis = () => {\n    handleSubmit();\n  };\n\n  // Render current step content\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 'intro':\n        return (\n          <div className=\"text-center p-6\">\n            <h2 className=\"text-2xl font-bold mb-4\">\n              Welcome to UltrAI Analysis\n            </h2>\n            <p className=\"mb-6 text-gray-600\">\n              This tool helps you analyze text using multiple AI models working\n              together. Follow the steps to create your analysis.\n            </p>\n            <div className=\"flex justify-center\">\n              <button\n                onClick={goToNextStep}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md flex items-center\"\n              >\n                Get Started\n                <ChevronRight className=\"ml-2\" size={16} />\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'prompt':\n        return (\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">\n              Step 1: Enter Your Prompt\n            </h2>\n            <p className=\"mb-4 text-gray-600\">\n              Write what you'd like to analyze. Be as specific as possible for\n              best results.\n            </p>\n            <div className=\"mb-4\">\n              <textarea\n                value={prompt}\n                onChange={e => setPrompt(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600 dark:placeholder-gray-400\"\n                rows={5}\n                placeholder=\"What would you like to analyze?\"\n              />\n            </div>\n          </div>\n        );\n\n      case 'models':\n        return (\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">\n              Step 2: Select AI Models\n            </h2>\n            <p className=\"mb-4 text-gray-600\">\n              Choose which AI models to use for your analysis. Each model brings\n              unique strengths.\n            </p>\n\n            {modelsLoading ? (\n              <div className=\"flex justify-center items-center py-8\">\n                <Loader2 className=\"animate-spin mr-2\" />\n                <span>Loading available models...</span>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {availableModels.map(model => (\n                    <div\n                      key={model}\n                      className={`border p-3 rounded-md cursor-pointer ${\n                        selectedModels.includes(model)\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200'\n                      }`}\n                      onClick={() => toggleModel(model)}\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedModels.includes(model)}\n                            onChange={() => toggleModel(model)}\n                            className=\"mr-2\"\n                            aria-label={`Select ${model}`}\n                            title={`Select ${model}`}\n                          />\n                          <span>{model}</span>\n                        </div>\n                        {selectedModels.includes(model) && (\n                          <div className=\"flex items-center\">\n                            <input\n                              type=\"radio\"\n                              name=\"primaryModel\"\n                              checked={primaryModel === model}\n                              onChange={() => handlePrimaryModelChange(model)}\n                              className=\"mr-1\"\n                              aria-label={`Set ${model} as primary`}\n                              title={`Set ${model} as primary`}\n                            />\n                            <label className=\"text-sm text-gray-600\">\n                              Primary\n                            </label>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"bg-yellow-50 border border-yellow-200 p-3 rounded-md\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Selected Models:</strong>{' '}\n                    {selectedModels.join(', ')}\n                  </p>\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Primary Model:</strong> {primaryModel}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'pattern':\n        return (\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">\n              Step 3: Select Analysis Pattern\n            </h2>\n            <p className=\"mb-4 text-gray-600\">\n              Choose how the models should collaborate on your analysis. Each\n              pattern represents a different approach to intelligence\n              multiplication.\n            </p>\n\n            <div className=\"space-y-3\">\n              {patterns.map(pattern => (\n                <div\n                  key={pattern.key}\n                  className={`border p-3 rounded-md cursor-pointer ${\n                    selectedPattern === pattern.key\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200'\n                  }`}\n                  onClick={() => handlePatternChange(pattern.key)}\n                >\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      name=\"pattern\"\n                      checked={selectedPattern === pattern.key}\n                      onChange={() => handlePatternChange(pattern.key)}\n                      className=\"mr-2\"\n                      aria-label={`Select ${pattern.name} pattern`}\n                      title={`Select ${pattern.name} pattern`}\n                    />\n                    <div>\n                      <span className=\"font-medium\">{pattern.name}</span>\n                      <p className=\"text-sm text-gray-600\">\n                        {pattern.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n\n      case 'results':\n        return (\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">Analysis Results</h2>\n            <div className=\"flex items-center mb-4\">\n              <span className=\"text-sm bg-gray-200 rounded px-2 py-1 mr-2\">\n                Prompt\n              </span>\n              <p className=\"text-gray-700\">{prompt}</p>\n            </div>\n\n            {/* Combined response */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-medium mb-2\">\n                Ultra Combined Response\n              </h3>\n              <div className=\"bg-gray-50 p-4 rounded border border-gray-200 whitespace-pre-wrap\">\n                {output}\n              </div>\n            </div>\n\n            {/* Individual model responses */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-medium mb-2\">\n                Individual Model Responses\n              </h3>\n              <div className=\"space-y-4\">\n                {modelResponses.map((response, index) => (\n                  <div\n                    key={index}\n                    className=\"border rounded-md overflow-hidden\"\n                  >\n                    <div className=\"bg-gray-100 px-4 py-2 font-medium flex justify-between items-center\">\n                      <span>{response.model}</span>\n                      {response.model === primaryModel && (\n                        <span className=\"text-xs bg-blue-100 text-blue-700 rounded px-2 py-1\">\n                          Primary\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"p-4 whitespace-pre-wrap\">\n                      {typeof response.response === 'string'\n                        ? response.response\n                        : typeof response.response === 'object' &&\n                            response.response !== null\n                          ? JSON.stringify(response.response, null, 2)\n                          : String(\n                              response.response || 'No response available'\n                            )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"mt-4 flex justify-between\">\n              <button\n                onClick={() => setCurrentStep('prompt')}\n                className=\"bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 px-4 rounded-md\"\n              >\n                New Analysis\n              </button>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  // Render the results view\n  const renderResults = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex flex-col items-center justify-center p-8 space-y-4\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-blue-500\" />\n          <p className=\"text-lg font-medium\">Analyzing your prompt...</p>\n          <p className=\"text-sm text-gray-500\">This may take a few moments</p>\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 my-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertCircle className=\"h-6 w-6 text-red-500 mt-0.5\" />\n            <div>\n              <h3 className=\"text-lg font-medium text-red-800\">\n                Analysis Error\n              </h3>\n              <p className=\"text-red-700 mt-1\">{error}</p>\n              <button\n                onClick={retryAnalysis}\n                className=\"mt-3 px-4 py-2 bg-red-100 hover:bg-red-200 text-red-800 rounded-md flex items-center space-x-2 transition-colors\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                <span>Retry Analysis</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (modelResponses.length === 0) {\n      return (\n        <div className=\"text-center p-8 text-gray-500\">\n          <p>No results to display. Please run an analysis first.</p>\n        </div>\n      );\n    }\n\n    return (\n      <div ref={resultsRef} className=\"space-y-8\">\n        {/* Results view toggle */}\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Analysis Results</h2>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setResponseView('sideBySide')}\n              className={`px-3 py-1.5 rounded-md ${\n                responseView === 'sideBySide'\n                  ? 'bg-blue-100 text-blue-700'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              Side by Side\n            </button>\n            <button\n              onClick={() => setResponseView('combined')}\n              className={`px-3 py-1.5 rounded-md ${\n                responseView === 'combined'\n                  ? 'bg-blue-100 text-blue-700'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              Combined View\n            </button>\n          </div>\n        </div>\n\n        {/* Performance metrics */}\n        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-gray-700 mb-2\">\n            Analysis Performance\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"bg-white p-3 rounded border border-gray-100\">\n              <p className=\"text-xs text-gray-500\">Total Time</p>\n              <p className=\"text-lg font-medium\">\n                {analysisMetrics.timeTaken.toFixed(2)}s\n              </p>\n            </div>\n            <div className=\"bg-white p-3 rounded border border-gray-100\">\n              <p className=\"text-xs text-gray-500\">Models Used</p>\n              <p className=\"text-lg font-medium\">{modelResponses.length}</p>\n            </div>\n            <div className=\"bg-white p-3 rounded border border-gray-100\">\n              <p className=\"text-xs text-gray-500\">Pattern</p>\n              <p className=\"text-lg font-medium\">{selectedPattern}</p>\n            </div>\n            <div className=\"bg-white p-3 rounded border border-gray-100\">\n              <p className=\"text-xs text-gray-500\">Primary Model</p>\n              <p className=\"text-lg font-medium\">\n                {formatModelName(primaryModel)}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Prompt display */}\n        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Your Prompt\n            </h3>\n            <button\n              onClick={() => copyToClipboard(prompt)}\n              className=\"text-gray-500 hover:text-gray-700\"\n              title=\"Copy prompt\"\n            >\n              <Copy className=\"h-4 w-4\" />\n            </button>\n          </div>\n          <div className=\"bg-white p-3 rounded border border-gray-100\">\n            <p className=\"whitespace-pre-wrap text-gray-900 dark:text-gray-100\">\n              {prompt}\n            </p>\n          </div>\n        </div>\n\n        {/* Model responses */}\n        {responseView === 'sideBySide' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {modelResponses.map((modelResponse, index) => (\n              <div\n                key={index}\n                className=\"bg-white border border-gray-200 rounded-lg shadow-sm\"\n              >\n                <div className=\"bg-gray-50 p-3 border-b border-gray-200 flex justify-between items-center\">\n                  <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                    {formatModelName(modelResponse.model)}\n                  </h3>\n                  <button\n                    onClick={() => copyToClipboard(modelResponse.response)}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                    title=\"Copy response\"\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </button>\n                </div>\n                <div className=\"p-4 overflow-auto max-h-[400px]\">\n                  <pre className=\"whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-100\">\n                    {typeof modelResponse.response === 'string'\n                      ? modelResponse.response\n                      : typeof modelResponse.response === 'object' &&\n                          modelResponse.response !== null\n                        ? JSON.stringify(modelResponse.response, null, 2)\n                        : String(\n                            modelResponse.response || 'No response available'\n                          )}\n                  </pre>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {modelResponses.map((modelResponse, index) => (\n              <div\n                key={index}\n                className=\"bg-white border border-gray-200 rounded-lg shadow-sm\"\n              >\n                <div className=\"bg-gray-50 p-3 border-b border-gray-200 flex justify-between items-center\">\n                  <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                    {formatModelName(modelResponse.model)}\n                  </h3>\n                  <button\n                    onClick={() => copyToClipboard(modelResponse.response)}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                    title=\"Copy response\"\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </button>\n                </div>\n                <div className=\"p-4 overflow-auto max-h-[400px]\">\n                  <pre className=\"whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-100\">\n                    {typeof modelResponse.response === 'string'\n                      ? modelResponse.response\n                      : typeof modelResponse.response === 'object' &&\n                          modelResponse.response !== null\n                        ? JSON.stringify(modelResponse.response, null, 2)\n                        : String(\n                            modelResponse.response || 'No response available'\n                          )}\n                  </pre>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Ultra model summary/analysis */}\n        {output && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg shadow-sm\">\n            <div className=\"bg-blue-100 p-3 border-b border-blue-200 flex justify-between items-center\">\n              <h3 className=\"font-medium text-blue-800\">\n                Ultra Analysis Summary\n              </h3>\n              <button\n                onClick={() => copyToClipboard(output)}\n                className=\"text-blue-600 hover:text-blue-800\"\n                title=\"Copy analysis\"\n              >\n                <Copy className=\"h-4 w-4\" />\n              </button>\n            </div>\n            <div className=\"p-4 overflow-auto max-h-[500px]\">\n              <pre className=\"whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-100\">\n                {output}\n              </pre>\n            </div>\n          </div>\n        )}\n\n        {/* Action buttons */}\n        <div className=\"flex justify-between pt-4\">\n          <button\n            onClick={() => setCurrentStep('pattern')}\n            className=\"px-4 py-2 border border-gray-300 rounded-md flex items-center space-x-2 hover:bg-gray-50 transition-colors\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n            <span>Back to Pattern Selection</span>\n          </button>\n          <button\n            onClick={retryAnalysis}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md flex items-center space-x-2 hover:bg-blue-700 transition-colors\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            <span>Run Analysis Again</span>\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">UltrAI Analysis</h1>\n\n      {/* Step progress */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          {['intro', 'prompt', 'models', 'pattern', 'results'].map(\n            (step, index) => (\n              <div key={step} className=\"flex items-center\">\n                <div\n                  className={`\n                flex items-center justify-center w-8 h-8 rounded-full\n                ${\n                  currentStep === step\n                    ? 'bg-blue-600 text-white'\n                    : currentStep === 'results' ||\n                        index <\n                          [\n                            'intro',\n                            'prompt',\n                            'models',\n                            'pattern',\n                            'results',\n                          ].indexOf(currentStep)\n                      ? 'bg-green-500 text-white'\n                      : 'bg-gray-200 text-gray-600'\n                }\n              `}\n                >\n                  {currentStep === 'results' ||\n                  index <\n                    ['intro', 'prompt', 'models', 'pattern', 'results'].indexOf(\n                      currentStep\n                    ) ? (\n                    <CheckCircle size={16} />\n                  ) : (\n                    index + 1\n                  )}\n                </div>\n                {index < 4 && (\n                  <div\n                    className={`h-1 w-10 ${\n                      index <\n                      ['intro', 'prompt', 'models', 'pattern'].indexOf(\n                        currentStep\n                      )\n                        ? 'bg-green-500'\n                        : 'bg-gray-200'\n                    }`}\n                  />\n                )}\n              </div>\n            )\n          )}\n        </div>\n        <div className=\"flex justify-between text-xs text-gray-600\">\n          <span>Start</span>\n          <span>Prompt</span>\n          <span>Models</span>\n          <span>Pattern</span>\n          <span>Results</span>\n        </div>\n      </div>\n\n      {/* Error message */}\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 text-red-700 rounded-md border border-red-200\">\n          {error}\n        </div>\n      )}\n\n      {/* Main content */}\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n        {renderStepContent()}\n      </div>\n\n      {/* Results View */}\n      {currentStep === 'results' && (\n        <div className=\"mt-6\">{renderResults()}</div>\n      )}\n\n      {/* Navigation buttons */}\n      {currentStep !== 'intro' && currentStep !== 'results' && (\n        <div className=\"flex justify-between mt-4\">\n          <button\n            onClick={goToPreviousStep}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 px-4 rounded-md flex items-center\"\n          >\n            <ChevronLeft className=\"mr-2\" size={16} />\n            Back\n          </button>\n\n          <button\n            onClick={goToNextStep}\n            disabled={!canProceed() || isLoading}\n            className={`py-2 px-4 rounded-md flex items-center ${\n              !canProceed() || isLoading\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                : 'bg-blue-600 hover:bg-blue-700 text-white'\n            }`}\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"animate-spin mr-2\" size={16} />\n                Processing...\n              </>\n            ) : (\n              <>\n                {currentStep === 'pattern' ? 'Run Analysis' : 'Next'}\n                <ChevronRight className=\"ml-2\" size={16} />\n              </>\n            )}\n          </button>\n        </div>\n      )}\n\n      {currentStep === 'intro' && (\n        <div className=\"mt-8 text-center text-gray-600\">\n          <p>\n            For document management, visit the{' '}\n            <Link to=\"/documents\" className=\"text-blue-600 underline\">\n              Documents page\n            </Link>\n            .\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleAnalysis;\n"],"names":["ChevronLeft","createLucideIcon","ChevronRight","SimpleAnalysis","prompt","setPrompt","useState","output","setOutput","isLoading","setIsLoading","error","setError","currentStep","setCurrentStep","availableModels","setAvailableModels","selectedModels","setSelectedModels","primaryModel","setPrimaryModel","patterns","setPatterns","selectedPattern","setSelectedPattern","modelsLoading","setModelsLoading","modelResponses","setModelResponses","analysisMetrics","setAnalysisMetrics","responseView","setResponseView","resultsRef","React","useEffect","models","fetchAvailableModels","err","toggleModel","model","m","handlePrimaryModelChange","handlePatternChange","pattern","handleSubmit","payload","result","analyzePrompt","ultraResponse","individualResponses","response","modelResponseData","goToNextStep","goToPreviousStep","canProceed","formatModelName","name","copyToClipboard","text","retryAnalysis","renderStepContent","jsxs","jsx","e","Loader2","index","renderResults","AlertCircle","RefreshCw","Copy","modelResponse","step","CheckCircle","Fragment","Link"],"mappings":"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","x_google_ignoreList":[0,1]}