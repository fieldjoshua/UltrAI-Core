{"version":3,"file":"DocumentsPage-N0t7MBAS.js","sources":["../../node_modules/react-redux/es/hooks/useStore.js","../../node_modules/react-redux/es/hooks/useDispatch.js","../../src/hooks/redux.ts","../../src/features/documents/components/DocumentList.tsx","../../src/services/documentService.ts","../../src/features/documents/components/DocumentUpload.tsx","../../src/pages/DocumentsPage.tsx"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext, createReduxContextHook } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context = ReactReduxContext) {\n  const useStore = // @ts-ignore\n  context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    const store = useStore(); // @ts-ignore\n\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport const useDispatch = /*#__PURE__*/createDispatchHook();","import { useDispatch, useSelector } from 'react-redux';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch();\nexport const useAppSelector = useSelector;\n","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/redux';\nimport {\n  fetchDocuments,\n  deleteDocument,\n  toggleDocumentSelection,\n} from '../documentsSlice';\n\nconst DocumentList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { documents, selectedDocuments, isLoading, error } = useAppSelector(\n    state => state.documents\n  );\n\n  useEffect(() => {\n    // Fetch documents when component mounts\n    dispatch(fetchDocuments());\n  }, [dispatch]);\n\n  const handleDeleteDocument = (id: string) => {\n    if (window.confirm('Are you sure you want to delete this document?')) {\n      dispatch(deleteDocument(id));\n    }\n  };\n\n  const handleToggleSelect = (id: string) => {\n    dispatch(toggleDocumentSelection(id));\n  };\n\n  if (isLoading && documents.length === 0) {\n    return <div className=\"flex justify-center p-8\">Loading documents...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative my-4\">\n        Error: {error}\n      </div>\n    );\n  }\n\n  if (documents.length === 0) {\n    return (\n      <div className=\"text-center p-8 bg-gray-50 rounded-lg\">\n        <h3 className=\"text-lg font-medium text-gray-500\">No documents yet</h3>\n        <p className=\"mt-2 text-sm text-gray-400\">\n          Upload documents to get started with analysis\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mt-4\">\n      <h2 className=\"text-xl font-semibold mb-4\">Your Documents</h2>\n\n      <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n        <ul className=\"divide-y divide-gray-200\">\n          {documents.map(document => (\n            <li key={document.id} className=\"relative\">\n              <div className=\"flex items-center px-4 py-4 sm:px-6 hover:bg-gray-50\">\n                <div className=\"min-w-0 flex-1 sm:flex sm:items-center sm:justify-between\">\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                      checked={selectedDocuments.includes(document.id)}\n                      onChange={() => handleToggleSelect(document.id)}\n                    />\n                    <div className=\"ml-4\">\n                      <div className=\"flex text-sm font-medium text-indigo-600 truncate\">\n                        {document.name}\n                      </div>\n                      <div className=\"mt-2 flex\">\n                        <div className=\"flex items-center text-sm text-gray-500\">\n                          <span>\n                            {document.type} â€¢ {formatFileSize(document.size)}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex mt-1\">\n                        <span\n                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                            document.status === 'uploaded'\n                              ? 'bg-green-100 text-green-800'\n                              : document.status === 'processing'\n                                ? 'bg-yellow-100 text-yellow-800'\n                                : 'bg-gray-100 text-gray-800'\n                          }`}\n                        >\n                          {document.status}\n                        </span>\n                        <span className=\"ml-2 text-xs text-gray-500\">\n                          Uploaded:{' '}\n                          {new Date(document.uploadDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"ml-4 flex-shrink-0 flex\">\n                    <button\n                      onClick={() => handleDeleteDocument(document.id)}\n                      className=\"inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\n// Helper function to format file size\nconst formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nexport default DocumentList;\n","import apiClient, { endpoints, request } from './api';\nimport { Document } from '../features/documents/documentsSlice';\n\n/**\n * Get all documents\n * @returns Array of documents\n */\nexport const getAllDocuments = async (): Promise<Document[]> => {\n  return request<Document[]>({\n    url: endpoints.documents.getAll,\n    method: 'GET',\n  });\n};\n\n/**\n * Get document by ID\n * @param id Document ID\n * @returns Document details\n */\nexport const getDocumentById = async (id: string): Promise<Document> => {\n  return request<Document>({\n    url: endpoints.documents.getById(id),\n    method: 'GET',\n  });\n};\n\n/**\n * Upload a document\n * @param file File to upload\n * @returns Uploaded document details\n */\nexport const uploadDocument = async (file: File): Promise<Document> => {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  return request<Document>({\n    url: endpoints.documents.upload,\n    method: 'POST',\n    data: formData,\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n};\n\n/**\n * Upload multiple documents with progress tracking\n * @param files Files to upload\n * @param onUploadProgress Progress callback\n * @returns Array of uploaded document details\n */\nexport const uploadMultipleDocuments = async (\n  files: File[],\n  onUploadProgress?: (progressEvent: any) => void\n): Promise<Document[]> => {\n  const formData = new FormData();\n\n  files.forEach(file => {\n    formData.append('files', file);\n  });\n\n  return request<Document[]>({\n    url: endpoints.documents.upload,\n    method: 'POST',\n    data: formData,\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n    onUploadProgress,\n  });\n};\n\n/**\n * Delete a document\n * @param id Document ID to delete\n * @returns Success message\n */\nexport const deleteDocument = async (\n  id: string\n): Promise<{ success: boolean; message: string }> => {\n  return request<{ success: boolean; message: string }>({\n    url: endpoints.documents.delete(id),\n    method: 'DELETE',\n  });\n};\n\n/**\n * Create a chunked upload session\n * @param fileInfo Information about the file\n * @returns Session ID and upload details\n */\nexport const createUploadSession = async (fileInfo: {\n  fileName: string;\n  fileSize: number;\n  chunkSize: number;\n  totalChunks: number;\n}): Promise<{\n  sessionId: string;\n  chunkSize: number;\n  totalChunks: number;\n}> => {\n  return request<{\n    sessionId: string;\n    chunkSize: number;\n    totalChunks: number;\n  }>({\n    url: '/create-document-session',\n    method: 'POST',\n    data: fileInfo,\n  });\n};\n\n/**\n * Upload a chunk in a chunked upload session\n * @param sessionId Session ID\n * @param chunkIndex Chunk index\n * @param chunk File chunk\n * @param onUploadProgress Progress callback\n * @returns Upload status\n */\nexport const uploadChunk = async (\n  sessionId: string,\n  chunkIndex: number,\n  chunk: Blob,\n  onUploadProgress?: (progressEvent: any) => void\n): Promise<{\n  success: boolean;\n  received: number;\n  total: number;\n}> => {\n  const formData = new FormData();\n  formData.append('sessionId', sessionId);\n  formData.append('chunkIndex', chunkIndex.toString());\n  formData.append('chunk', chunk);\n\n  return request<{\n    success: boolean;\n    received: number;\n    total: number;\n  }>({\n    url: '/upload-document-chunk',\n    method: 'POST',\n    data: formData,\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n    onUploadProgress,\n  });\n};\n\n/**\n * Finalize a chunked upload\n * @param sessionId Session ID\n * @param fileName Original file name\n * @returns Uploaded document details\n */\nexport const finalizeUpload = async (\n  sessionId: string,\n  fileName: string\n): Promise<Document> => {\n  return request<Document>({\n    url: '/finalize-document-upload',\n    method: 'POST',\n    data: {\n      sessionId,\n      fileName,\n    },\n  });\n};\n","import React, { useState, useRef, ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/redux';\nimport { uploadDocument, setUploadProgress } from '../documentsSlice';\nimport * as documentService from '../../../services/documentService';\n\nconst DocumentUpload: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { isLoading, uploadProgress, error } = useAppSelector(\n    state => state.documents\n  );\n  const [dragActive, setDragActive] = useState<boolean>(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Handle file selection\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      handleUpload(files[0]);\n    }\n  };\n\n  // Handle drag events\n  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop event\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      handleUpload(e.dataTransfer.files[0]);\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = async (file: File) => {\n    try {\n      // Update progress via Redux\n      const onUploadProgress = (progressEvent: any) => {\n        const percentCompleted = Math.round(\n          (progressEvent.loaded * 100) / progressEvent.total\n        );\n        dispatch(setUploadProgress(percentCompleted));\n      };\n\n      // Use our service to upload and our Redux action to dispatch\n      const uploadedDoc = await documentService.uploadDocument(file);\n      dispatch(uploadDocument(file));\n\n      // Reset the file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    } catch (error) {\n      console.error('Upload failed:', error);\n      // Error handling is managed by Redux through uploadDocument thunk\n    }\n  };\n\n  // Open file selector on button click\n  const openFileSelector = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  return (\n    <div className=\"mt-4\">\n      <h2 className=\"text-xl font-semibold mb-4\">Upload Document</h2>\n\n      <div\n        className={`border-2 border-dashed rounded-lg p-6 text-center ${\n          dragActive\n            ? 'border-indigo-500 bg-indigo-50'\n            : 'border-gray-300 hover:border-indigo-400'\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        <input\n          type=\"file\"\n          className=\"hidden\"\n          ref={fileInputRef}\n          onChange={handleFileChange}\n          accept=\".pdf,.doc,.docx,.txt,.md\"\n          aria-label=\"Upload document\"\n        />\n\n        <div className=\"space-y-2\">\n          <svg\n            className=\"mx-auto h-12 w-12 text-gray-400\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={1}\n              d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n            />\n          </svg>\n          <div className=\"flex text-sm text-gray-600\">\n            <label htmlFor=\"file-upload\" className=\"relative cursor-pointer\">\n              <span className=\"text-indigo-600 hover:text-indigo-500\">\n                Upload a file\n              </span>\n              <span className=\"pl-1\">or drag and drop</span>\n            </label>\n          </div>\n          <p className=\"text-xs text-gray-500\">\n            PDF, DOC, DOCX, TXT, MD up to 10MB\n          </p>\n        </div>\n      </div>\n\n      {isLoading && (\n        <div className=\"mt-4\">\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n            <div\n              className=\"bg-indigo-600 h-2.5 rounded-full\"\n              style={{ width: `${uploadProgress}%` }}\n            ></div>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">\n            Uploading: {uploadProgress}%\n          </p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"mt-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\">\n          Error: {error}\n        </div>\n      )}\n\n      <button\n        type=\"button\"\n        onClick={openFileSelector}\n        disabled={isLoading}\n        className={`mt-4 w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${\n          isLoading\n            ? 'bg-gray-400 cursor-not-allowed'\n            : 'bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n        }`}\n      >\n        {isLoading ? 'Uploading...' : 'Select File'}\n      </button>\n    </div>\n  );\n};\n\nexport default DocumentUpload;\n","import React from 'react';\nimport DocumentList from '../features/documents/components/DocumentList';\nimport DocumentUpload from '../features/documents/components/DocumentUpload';\n\nconst DocumentsPage: React.FC = () => {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">\n        Document Management\n      </h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n        <div className=\"md:col-span-2\">\n          <DocumentList />\n        </div>\n        <div>\n          <DocumentUpload />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentsPage;\n"],"names":["createStoreHook","context","ReactReduxContext","useReduxContext","useDefaultReduxContext","createReduxContextHook","store","useStore","createDispatchHook","useDefaultStore","useDispatch","useAppDispatch","useAppSelector","useSelector","DocumentList","dispatch","documents","selectedDocuments","isLoading","error","state","useEffect","fetchDocuments","handleDeleteDocument","id","deleteDocument","handleToggleSelect","toggleDocumentSelection","jsx","jsxs","document","formatFileSize","bytes","k","sizes","i","uploadDocument","file","formData","request","endpoints","DocumentUpload","uploadProgress","dragActive","setDragActive","useState","fileInputRef","useRef","handleFileChange","event","files","handleUpload","handleDrag","e","handleDrop","onUploadProgress","progressEvent","percentCompleted","setUploadProgress","uploadedDoc","documentService.uploadDocument","openFileSelector","DocumentsPage"],"mappings":"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","x_google_ignoreList":[0,1]}