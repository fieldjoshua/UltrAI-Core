{"version":3,"mappings":";8WAOA,MAAMA,GAA0BC,EAAM,KAAK,IACzCC,EAAA,WAAO,uCAA2B,sCAAE,KAAWC,IAAA,CAC7C,QAASA,EAAE,yBACX,CACJ,EAEMC,GAAWH,EAAM,KAAK,IAAMC,EAAA,WAAO,wBAAmB,2BAAC,EAMvDG,GAAwB,IAAM,CAElC,KAAM,CAACC,EAAQC,CAAS,EAAIC,WAAS,EAAE,EACjC,CAACC,EAAgBC,CAAiB,EAAIF,WAAS,EAAE,EACjD,CAACG,EAAWC,CAAY,EAAIJ,WAAS,EAAE,EACvC,CAACK,EAAcC,CAAe,EAAIN,WAAS,aAAa,EACxD,CAACO,EAAiBC,CAAkB,EAAIR,WAAS,KAAK,EACtD,CAACS,EAAyBC,CAA0B,EAAIV,WAAS,EAAI,EAGrE,CAACW,EAAiBC,CAAkB,EAAIZ,WAAS,EAAE,EACnD,CAACa,EAAmBC,CAAoB,EAAId,WAAS,EAAE,EACvD,CAACe,EAAiBC,CAAkB,EAAIhB,WAAS,EAAK,EACtD,CAACiB,EAAmBC,CAAoB,EAAIlB,WAAS,EAAK,EAG1D,CAACmB,EAASC,CAAU,EAAIpB,WAAS,IAAI,EACrC,CAACqB,EAAcC,CAAe,EAAItB,WAAS,EAAK,EAChD,CAACuB,EAAOC,CAAQ,EAAIxB,WAAS,IAAI,EACjC,CAACyB,EAAeC,CAAgB,EAAI1B,WAAS,EAAE,EAG/C,CAAC2B,EAAgBC,CAAiB,EAAI5B,WAAS,MAAM,EACrD,CAAC6B,EAAcC,CAAe,EAAI9B,WAAS,CAAC,EAC5C,CAAC+B,EAAiBC,CAAkB,EAAIhC,WAAS,EAAE,EAGnD,CAACiC,EAAuBC,CAAwB,EAAIlC,WAAS,EAAK,EAGlE,CAACmC,EAAOC,CAAQ,EAAIpC,WAAS,CACjC,QAAS,GACT,KAAM,OACN,QAAS,GACV,EACKqC,EAAY,CAACC,EAAMC,EAASC,EAAY,OAAS,CACrDJ,EAAS,CAAE,QAAS,GAAM,KAAAE,EAAM,QAAAC,EAAS,EAClC,oBAAaF,EAAU,EAAE,EAChCA,EAAU,GAAK,OAAO,WACpB,IAAMD,EAAS,CAAE,QAAS,GAAO,KAAM,OAAQ,QAAS,GAAI,EAC5DI,CACF,CACF,EAGAC,YAAU,IAAM,CAEV,IACF,MAAMC,EAAQ,KAAK,MACjB,aAAa,QAAQ,sBAAsB,GAAK,MAClD,EACIA,IACE,OAAOA,EAAM,QAAW,UAAU3C,EAAU2C,EAAM,MAAM,EACxD,MAAM,QAAQA,EAAM,cAAc,GACpCxC,EAAkBwC,EAAM,cAAc,EACpC,OAAOA,EAAM,WAAc,UAAUtC,EAAasC,EAAM,SAAS,EACjE,OAAOA,EAAM,iBAAoB,UACnClC,EAAmBkC,EAAM,eAAe,QAElC,EAEZ,MAAMC,EAAa,SAAY,CAC7B3B,EAAmB,EAAI,EACnB,IACI,MAAA4B,EAAS,MAAMC,GAAsB,EAC3CjC,EAAmBgC,CAAM,EAGrBA,EAAO,OAAS,IAClB1C,EAAkB,CAAC0C,EAAO,CAAC,CAAC,CAAC,EAChBxC,EAAAwC,EAAO,CAAC,CAAC,SAEjBE,EAAK,CACZtB,EAAS,iCAAiC,EAClC,cAAM,uBAAwBsB,CAAG,SACzC,CACA9B,EAAmB,EAAK,EAE5B,EAEM+B,EAAe,SAAY,CAC/B7B,EAAqB,EAAI,EACrB,IACI,MAAA8B,EAAW,MAAMC,GAAwB,EAC/CnC,EAAqBkC,CAAQ,QACtBF,EAAK,CACJ,cAAM,yBAA0BA,CAAG,EAEtBhC,EAAA,CACnB,CAAE,KAAM,MAAO,YAAa,8BAA+B,EAC3D,CACE,KAAM,aACN,YAAa,2CACf,EACA,CACE,KAAM,WACN,YAAa,0CACf,EACA,CAAE,KAAM,aAAc,YAAa,gCAAiC,EACpE,CAAE,KAAM,cAAe,YAAa,4BAA6B,EACjE,CAAE,KAAM,WAAY,YAAa,yBAA0B,EAC5D,SACD,CACAI,EAAqB,EAAK,EAE9B,EAEWyB,EAAA,EACEI,EAAA,CACf,EAAG,EAAE,EAGLN,YAAU,IAAM,CACV,IACW,qBACX,uBACA,KAAK,UAAU,CACb,OAAA3C,EACA,eAAAG,EACA,UAAAE,EACA,gBAAAI,CACD,EACH,OACU,IACX,CAACT,EAAQG,EAAgBE,EAAWI,CAAe,CAAC,EAGvD,MAAM2C,EAA6BC,GAAA,CAC7BlD,EAAe,SAASkD,CAAK,EAE3BlD,EAAe,OAAS,GAAKkD,IAAUhD,GACzCD,EAAkBD,EAAe,OAAYN,OAAMwD,CAAK,CAAC,EAI3DjD,EAAkB,CAAC,GAAGD,EAAgBkD,CAAK,CAAC,CAEhD,EAGMC,EAAiCD,GAAA,CACrC/C,EAAa+C,CAAK,EAGblD,EAAe,SAASkD,CAAK,GAChCjD,EAAkB,CAAC,GAAGD,EAAgBkD,CAAK,CAAC,CAEhD,EAGME,EAA0B,IAAM,CACpC,MAAMC,EAAS,CACb,CACE,MAAO,EACP,QACE,gFACJ,EACA,CACE,MAAO,EACP,QACE,8EACJ,EACA,CACE,MAAO,EACP,QACE,wEAEN,EAEA,IAAIC,EAAa,EACjB3B,EAAkB,WAAW,EAC7BE,EAAgB,CAAC,EACEE,EAAAsB,EAAO,CAAC,EAAE,OAAO,EAE9B,MAAAE,EAAmB,YAAY,IAAM,CACzCD,IACIA,EAAaD,EAAO,QACNxB,EAAAwB,EAAOC,CAAU,EAAE,KAAK,EACrBvB,EAAAsB,EAAOC,CAAU,EAAE,OAAO,IAE7C,cAAcC,CAAgB,EAC9B5B,EAAkB,UAAU,EAC5BE,EAAgB,CAAC,EACjBE,EAAmB,yCAAyC,IAE7D,GAAI,EAEA,OAAAwB,CACT,EAGMC,EAAe,MAAMC,GAAK,OAI1B,GAHJA,EAAE,eAAe,EAGb,CAAC5D,EAAO,OAAQ,CAClB0B,EAAS,uBAAuB,EAChC,OAGE,GAAAvB,EAAe,OAAS,EAAG,CAC7BuB,EAAS,mCAAmC,EAC5C,OAGFF,EAAgB,EAAI,EACpBE,EAAS,IAAI,EACbJ,EAAW,IAAI,EAEX,IACE,IAAAuC,EAEE,MAAAC,EAAU,QAAQ,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,EAAG,EAAE,CAAC,GAG/D,GAFAlC,EAAiBkC,CAAO,EAEpBnD,EAAyB,CAE3BmB,EAAkB,WAAW,EAC7BI,EAAmB,wCAAwC,EAG3D,MAAMwB,EAAmBH,EAAwB,EAEjDM,EAAW,MAAME,GACf,CACE,OAAA/D,EACA,OAAQG,EACR,QAASM,EACT,WAAYJ,GAAaF,EAAe,CAAC,EACzC,aAAc,OAChB,EACA2D,CACF,EAEA,cAAcJ,CAAgB,EAC9B5B,EAAkB,UAAU,OAG5BA,EAAkB,WAAW,EAC7BI,EAAmB,yCAAyC,EAE5D2B,EAAW,MAAMG,GAAwB,CACvC,OAAAhE,EACA,OAAQG,EACR,UAAWE,GAAaF,EAAe,CAAC,EACxC,aAAAI,CAAA,CACD,EAEDuB,EAAkB,UAAU,EAG9BR,EAAWuC,CAAQ,EAGf,IACE,GAAAA,GAAYA,EAAS,SAAW,UAAW,CACvC,MAAAI,EACJ,OAAOJ,EAAS,iBAAoB,SAChCA,EAAS,gBAAgB,QAAQ,CAAC,EAClC,OACNtB,EACE,UACA,qBAAqB0B,EAAO,OAAOA,CAAI,IAAM,EAAE,GACjD,CACS,MAAAJ,GAAYA,EAAS,SAAW,SAC/BtB,EAAA,QAASsB,EAAS,OAAS,iBAAiB,EAElD,MAAAK,GAAWC,EAAAN,GAAA,YAAAA,EAAU,gBAAV,YAAAM,EAAyB,eACtCD,GACF3B,EAAU,UAAW2B,CAAQ,OAErB,SACLlB,EAAK,CACHtB,EAAA,6BAA6BsB,EAAI,OAAO,EAAE,EACnDlB,EAAkB,OAAO,EACjB,cAAM,oBAAqBkB,CAAG,EAC5BT,EAAA,QAASS,EAAI,SAAW,kBAAkB,SACpD,CACAxB,EAAgB,EAAK,EAEzB,EAGM4C,EAA2Bf,GAAA,CACzB,MAAAgB,EAAQhB,EAAM,MAAM,GAAG,EACzB,OAAAgB,EAAM,OAAS,EACV,GAAGA,EAAM,CAAC,EAAE,OAAO,CAAC,EAAE,cAAgBA,EAAM,CAAC,EAAE,MAAM,CAAC,CAAC,IAAIA,EAAM,CAAC,EAAE,aAAa,GAEnFhB,CACT,EAGE,OAAAiB,EAAA,KAAC,MAAI,WAAU,wBACb,UAACA,OAAA,OAAI,UAAU,OACb,UAACC,EAAA,UAAG,UAAU,0BAA0B,SAAmB,wBAC1DA,EAAA,SAAE,UAAU,gBAAgB,SAG7B,wFACF,QAGC,MAAI,WAAU,wDACb,SAACD,EAAA,YAAI,UAAU,oCACb,UAAAA,OAAC,MACC,WAACC,EAAA,UAAG,UAAU,8BAA8B,SAAkB,6BAC7D,IAAE,WAAU,wBACV,SAAA5D,EACG,kEACA,4CACN,IACF,EACA2D,OAAC,QAAM,WAAU,mCACf,UAAAC,EAAA,IAAC,SACC,KAAK,WACL,QAAS5D,EACT,SAAUiD,GAAKhD,EAA2BgD,EAAE,OAAO,OAAO,EAC1D,UAAU,OACZ,EACCW,EAAA,YAAK,UAAU,sBAAsB,SAEtC,qDACF,IACF,CACF,GAGC9C,GACE8C,EAAA,WAAI,UAAU,sDACb,eAAC,IAAE,WAAU,eAAgB,SAAA9C,CAAA,CAAM,CACrC,GAIDF,GAAgBZ,GACd4D,MAAA,OAAI,UAAU,OACb,SAAAA,EAAA,IAACC,GAAA,CACC,OAAQ3C,EACR,YAAaE,EACb,WAAY,EACZ,cAAeE,EACf,MAAOR,EAAQ,IAAI,MAAMA,CAAK,EAAI,SAEtC,EAIDZ,EAAgB,OAAS,GAAK,CAACI,GAC9BsD,MAAC,MAAI,WAAU,sDACb,SAAAD,OAAC,MAAI,WAAU,mBACb,UAAAC,EAAA,IAAC,OACC,UAAU,iDACV,KAAK,OACL,OAAO,eACP,QAAQ,YAER,SAAAA,EAAA,IAAC,QACC,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,wIACJ,CACF,SACC,MACC,WAACA,EAAA,UAAG,UAAU,qCAAqC,SAEnD,wBACAD,OAAC,IAAE,WAAU,4BAA4B,sHAEW,IACjDzD,EAAgB,OAAO,SACvBA,EAAgB,SAAW,EAAI,MAAQ,QAAQ,eAClD,EACC0D,EAAA,SAAE,UAAU,4BAA4B,SAGzC,iFACF,IACF,CACF,GAIFD,OAAC,MAAI,WAAU,6CAEb,UAACC,MAAA,OAAI,UAAU,gBACb,SAAAD,EAAA,KAAC,QACC,SAAUX,EACV,UAAU,oCAGV,UAACW,OAAA,OAAI,UAAU,OACb,UAAAC,EAAA,IAAC,SACC,QAAQ,SACR,UAAU,+CACX,2BAED,EACAA,EAAA,IAAC,YACC,GAAG,SACH,cAAY,eACZ,MAAOvE,EACP,SAAU4D,GAAK3D,EAAU2D,EAAE,OAAO,KAAK,EACvC,UAAU,sHACV,KAAM,EACN,YAAY,6DACb,EACH,EAGAU,OAAC,MAAI,WAAU,OACb,UAACA,OAAA,MAAG,UAAU,yCAAyC,+BAClCnE,EAAe,OAAO,cAC3C,EAECc,QACE,MAAI,WAAU,wCACZ,SAAM,WAAK,CAAE,OAAQ,CAAE,CAAC,EAAE,IAAI,CAACwD,EAAGC,IAChCH,EAAA,WAAY,UAAU,wBACrB,SAAAD,OAAC,MAAI,WAAU,0BACb,UAACC,MAAA,OAAI,UAAU,+BAAgC,GAC/CA,MAAC,MAAI,WAAU,+BAAgC,GACjD,IAJQG,CAKV,CACD,CACH,GAECH,EAAA,WAAI,UAAU,wCACZ,SAAgB1D,EAAA,IACfwC,GAAAkB,EAAA,IAAC,OAEC,UAAW,uDACTpE,EAAe,SAASkD,CAAK,EACzB,uCACA,uCACN,GACA,QAAS,IAAMD,EAAkBC,CAAK,EAEtC,eAAC,MAAI,WAAU,mCACb,SAACiB,OAAA,OAAI,UAAU,6BACb,UAAAC,EAAA,IAAC,SACC,KAAK,WACL,GAAI,SAASlB,CAAK,GAClB,QAASlD,EAAe,SAASkD,CAAK,EACtC,SAAU,IAAMD,EAAkBC,CAAK,EACvC,UAAU,OACZ,SACC,MACC,WAAAkB,EAAA,IAAC,SACC,QAAS,SAASlB,CAAK,GACvB,UAAU,qCAET,WAAgBA,CAAK,EACxB,EACClD,EAAe,SAASkD,CAAK,GAC5BkB,MAAC,MAAI,WAAU,OACb,SAAAD,EAAA,KAAC,QAAM,WAAU,0CACf,UAAAC,EAAA,IAAC,SACC,KAAK,QACL,GAAI,QAAQlB,CAAK,GACjB,KAAK,YACL,QAAShD,IAAcgD,EACvB,SAAU,IACRC,EAAsBD,CAAK,EAE7B,UAAU,OACZ,EAAE,yBAEJ,CACF,GAEJ,IACF,CACF,IA3CKA,CAAA,CA6CR,CACH,IAEJ,EAGCxC,EAAgB,OAAS,GAAK,CAACI,GAC7BqD,OAAA,OAAI,UAAU,6BAA6B,8CACR,UACjC,IAAE,MAAK,SAAS,UAAU,0BAA0B,SAErD,wBACF,EAID,CAAC3D,GACC2D,OAAA,OAAI,UAAU,OACb,UAACC,EAAA,UAAG,UAAU,yCAAyC,SAEvD,yCACAD,OAAC,MAAI,WAAU,iBACb,UAACA,OAAA,SAAM,UAAU,mCACf,UAAAC,EAAA,IAAC,SACC,KAAK,QACL,KAAK,eACL,MAAM,cACN,QAAShE,IAAiB,cAC1B,SAAU,IAAMC,EAAgB,aAAa,EAC7C,UAAU,OACZ,EACA+D,MAAC,QAAK,SAAoB,0BAC5B,EACAD,OAAC,QAAM,WAAU,mCACf,UAAAC,EAAA,IAAC,SACC,KAAK,QACL,KAAK,eACL,MAAM,UACN,QAAShE,IAAiB,UAC1B,SAAU,IAAMC,EAAgB,SAAS,EACzC,UAAU,OACZ,EACA+D,MAAC,QAAK,SAAgB,qBACxB,GACF,IACF,EAIFA,MAAC,MAAI,WAAU,mBACb,SAAAA,EAAA,IAAC,UACC,KAAK,SACL,cAAY,eACZ,SAAUhD,GAAgBV,EAAgB,OAAS,EACnD,MACEA,EAAgB,OAAS,EACrB,kDACA,GAEN,UAAW,mDACTU,GAAgBV,EAAgB,OAAS,EACrC,+CACAF,EACE,4GACA,0CACR,GAEC,SAAAE,EAAgB,OAAS,EACtB,oCACAU,EACEZ,EACE,8BACA,gBACFA,EACE,yBACA,qBAEZ,MAEJ,EAGA4D,MAAC,OAAI,UAAU,gBACZ,YACED,OAAA,OAAI,UAAU,oCACb,UAACC,EAAA,UAAG,UAAU,6BAA6B,SAAgB,qBAC1DpD,EACEoD,MAAA,OAAI,UAAU,YACZ,eAAM,KAAK,CAAE,OAAQ,EAAG,EAAE,IAAI,CAACE,EAAGC,IAChCJ,OAAA,OAAY,UAAU,gBACrB,UAACC,MAAA,OAAI,UAAU,oCAAqC,GACpDA,MAAC,MAAI,WAAU,+BAAgC,EAFvC,GAAAG,CAGV,CACD,CACH,GAEAH,EAAA,IAAC7E,GAAA,CACC,SAAUqB,EAAkB,IAAU4D,IAAA,CACpC,GAAIA,EAAE,KACN,KAAMA,EAAE,KACR,YAAaA,EAAE,aACf,EACF,gBAAAlE,EACA,gBAAiBC,EACjB,SAAUa,CAAA,CACZ,QAGD,MAAI,WAAU,4DACb,SAAC+C,EAAA,UAAE,UAAU,0BACX,UAAAC,MAAC,UAAO,SAAiB,sBAAS,8GAGpC,CACF,GAEAA,MAAC,MAAI,WAAU,OACb,SAAAA,EAAA,IAAC5E,EAAM,SAAN,CACC,SACE4E,EAAA,IAAC,MAAI,WAAU,wBAAwB,SAEvC,yBAGF,SAAAA,EAAA,IAACzE,GAAA,CACC,cAAA6B,EACA,MAAM,qBACR,EAEJ,IACF,CAEJ,IACF,EAGCN,GACCiD,EAAA,KAAC,MAAI,WAAU,oCACb,UAACA,OAAA,OAAI,UAAU,yCACb,UAACC,EAAA,UAAG,UAAU,yBAAyB,SAAgB,qBACtDlD,EAAQ,iBACNiD,OAAA,OAAI,UAAU,wBAAwB,8BACnBjD,EAAQ,gBAAgB,QAAQ,CAAC,EAAE,IACvD,IAEJ,EAGCV,GAA2BU,EAAQ,SAAW,WAC5CiD,OAAA,OAAI,UAAU,YAEZ,UAAAjD,EAAQ,gBACPiD,OAAC,MAAI,WAAU,OACb,UAACA,OAAA,OAAI,UAAU,yCACb,UAACC,EAAA,UAAG,UAAU,gGAAgG,SAE9G,qBACCA,EAAA,WAAI,UAAU,2DAA2D,SAE1E,0CACF,QAEC,MAAI,WAAU,+IACb,SAACA,MAAA,OAAI,UAAU,mBACb,SAAAA,EAAA,IAAC,OACC,cAAY,kBACZ,UAAU,wEAET,SAAQlD,EAAA,iBAEb,CACF,SAGC,MAAI,WAAU,gEACb,SAACiD,EAAA,YAAI,UAAU,oEACb,UAACA,OAAA,OAAI,UAAU,8BACb,UAACC,EAAA,YAAK,UAAU,cAAc,SAAQ,mBACrC,OAAK,WAAU,8CACb,SAAAlD,EAAQ,cAAgBZ,CAC3B,IACF,EACA6D,OAAC,MAAI,WAAU,8BACb,UAACC,EAAA,YAAK,UAAU,cAAc,SAAY,iBACzCA,EAAA,YAAK,UAAU,gBACb,WAAQ,YACLlD,EAAQ,YAAY,KAAK,IAAI,EAC7BlB,EAAe,KAAK,IAAI,CAC9B,GACF,IACF,CACF,IACF,EAIFmE,OAAC,MAAI,WAAU,gBACb,UAAAA,EAAA,KAAC,UACC,QAAS,IACPlC,EAAyB,CAACD,CAAqB,EAEjD,UAAU,+HAEV,UAAAoC,MAAC,QAAK,SAA2B,gCACjCA,EAAA,IAAC,OACC,UAAW,0CAA0CpC,EAAwB,aAAe,EAAE,GAC9F,KAAK,OACL,OAAO,eACP,QAAQ,YAER,SAAAoC,EAAA,IAAC,QACC,cAAc,QACd,eAAe,QACf,YAAa,EACb,EAAE,kBACJ,EACF,EACF,EAECpC,GACCmC,EAAA,KAAC,MAAI,WAAU,iBAEZ,UAAQjD,EAAA,mBACP,OAAO,KAAKA,EAAQ,iBAAiB,EAAE,OAAS,GAC9CiD,OAAC,MACC,WAACA,OAAA,MAAG,UAAU,+CACZ,UAACC,EAAA,YAAK,UAAU,kEAAkE,SAElF,MAAO,8BAET,EACAA,MAAC,OAAI,UAAU,wCACZ,gBAAO,QAAQlD,EAAQ,iBAAiB,EAAE,IACzC,CAAC,CAACgC,EAAOQ,CAAQ,IACfS,EAAA,KAAC,OAEC,UAAU,mCAEV,UAACA,OAAA,MAAG,UAAU,qCACX,UAAAF,EAAgBf,CAAK,EACrBhD,GAAaA,EAAU,SAASgD,CAAK,GACnCkB,MAAA,QAAK,UAAU,iEAAiE,SAEjF,iBAEJ,EACCA,EAAA,SAAE,UAAU,4CACV,SACHV,CAAA,KAbKR,CAAA,CAcP,CAGN,IACF,EAIHhC,EAAQ,gBACP,OAAO,KAAKA,EAAQ,cAAc,EAAE,OAAS,GAC3CiD,OAAC,MACC,WAACA,OAAA,MAAG,UAAU,+CACZ,UAACC,EAAA,YAAK,UAAU,gEAAgE,SAEhF,MAAO,iBAET,EACAA,MAAC,OAAI,UAAU,wCACZ,gBAAO,QAAQlD,EAAQ,cAAc,EAAE,IACtC,CAAC,CAACgC,EAAOQ,CAAQ,IACfS,EAAA,KAAC,OAEC,UAAU,mDAEV,UAAAC,MAAC,KAAG,WAAU,mBACX,SAAAH,EAAgBf,CAAK,EACxB,EACCkB,EAAA,SAAE,UAAU,4CACV,SACHV,CAAA,KARKR,CAAA,CASP,CAGN,IACF,EAIHhC,EAAQ,uBACP,OAAO,KAAKA,EAAQ,qBAAqB,EAAE,OAAS,GAClDiD,OAAC,MACC,WAACA,OAAA,MAAG,UAAU,+CACZ,UAACC,EAAA,YAAK,UAAU,gEAAgE,SAEhF,MAAO,0BAET,EACAA,MAAC,OAAI,UAAU,wCACZ,gBAAO,QAAQlD,EAAQ,qBAAqB,EAAE,IAC7C,CAAC,CAACgC,EAAOQ,CAAQ,IACfS,EAAA,KAAC,OAEC,UAAU,mDAEV,UAACA,OAAA,MAAG,UAAU,qCACX,UAAAF,EAAgBf,CAAK,EACrBkB,EAAA,YAAK,UAAU,6DAA6D,SAE7E,mBACF,EACCA,EAAA,SAAE,UAAU,4CACV,SACHV,CAAA,KAXKR,CAAA,CAYP,CAGN,GACF,GAIN,GAEJ,IACF,EAID,CAAC1C,GACC2D,OAAA,OAAI,UAAU,YAEZ,UAAAjD,EAAQ,mBACPA,EAAQ,kBAAkB,OAAS,UAChC,MACC,WAACkD,EAAA,UAAG,UAAU,2BAA2B,SAEzC,oBACAA,MAAC,OAAI,UAAU,YACZ,WAAQ,kBAAkB,IAAI,CAACV,EAAUe,IACxCN,EAAA,KAAC,OAEC,UAAU,gCAEV,UAACA,OAAA,MAAG,UAAU,mBACX,UAAST,EAAA,MAAM,KAAGA,EAAS,SAAS,IACpCxD,IAAcwD,EAAS,aACrB,OAAK,WAAU,6DAA6D,SAE7E,aAEJ,EACCU,EAAA,SAAE,UAAU,8BACV,WAAS,QACZ,KAbKK,CAAA,CAeR,CACH,IACF,EAIHvD,EAAQ,WACPiD,OAAC,MACC,WAACC,EAAA,UAAG,UAAU,2BAA2B,SAEzC,yBACAD,OAAC,MAAI,WAAU,kDACb,UAACA,OAAA,MAAG,UAAU,mBAAmB,4BACfjD,EAAQ,UAAU,MAAM,KACvCA,EAAQ,UAAU,SAAS,KAC9B,QACC,IAAE,WAAU,sBACV,SAAAA,EAAQ,UAAU,QACrB,GACF,GACF,IAEJ,EAIDA,EAAQ,SAAW,SACjBiD,EAAA,YAAI,UAAU,iDACb,UAACC,EAAA,UAAG,UAAU,0CAA0C,SAAK,gBAC5D,IAAE,WAAU,eACV,SAAAlD,EAAQ,OAAS,2BACpB,GACF,IAEJ,EAIDgB,EAAM,SACLkC,EAAA,IAAC,OACC,UAAW,mEACTlC,EAAM,OAAS,UACX,0BACAA,EAAM,OAAS,UACb,2BACAA,EAAM,OAAS,QACb,wBACA,wBACV,GACA,KAAK,SAEJ,SAAMA,EAAA,SACT,EAEJ,CAEJ,ECl4BMwC,GAA6B,IAE/BP,EAAA,KAAC,MAAI,WAAU,8BACb,UAACC,EAAA,UAAG,UAAU,0BAA0B,SAAmB,8BAC1DxE,GAAsB,KACzB","names":["AnalysisPatternSelector","React","__vitePreload","m","SSEPanel","OrchestratorInterface","prompt","setPrompt","useState","selectedModels","setSelectedModels","leadModel","setLeadModel","analysisType","setAnalysisType","selectedPattern","setSelectedPattern","useFeatherOrchestration","setUseFeatherOrchestration","availableModels","setAvailableModels","availablePatterns","setAvailablePatterns","isLoadingModels","setIsLoadingModels","isLoadingPatterns","setIsLoadingPatterns","results","setResults","isProcessing","setIsProcessing","error","setError","correlationId","setCorrelationId","progressStatus","setProgressStatus","currentStage","setCurrentStage","progressMessage","setProgressMessage","showDetailedBreakdown","setShowDetailedBreakdown","toast","setToast","showToast","type","message","timeoutMs","useEffect","saved","loadModels","models","getOrchestratorModels","err","loadPatterns","patterns","getOrchestratorPatterns","handleModelToggle","model","handleLeadModelChange","simulateFeatherProgress","stages","stageIndex","progressInterval","handleSubmit","e","response","newCorr","processWithFeatherOrchestration","processWithOrchestrator","secs","degraded","_a","formatModelName","parts","jsxs","jsx","AnalysisProgress","_","i","p","index","OrchestratorPage"],"ignoreList":[],"sources":["../../src/components/OrchestratorInterface.jsx","../../src/pages/OrchestratorPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  getOrchestratorModels,\n  getOrchestratorPatterns,\n  processWithFeatherOrchestration,\n  processWithOrchestrator,\n} from '../api/orchestrator';\nconst AnalysisPatternSelector = React.lazy(() =>\n  import('./AnalysisPatternSelector').then(m => ({\n    default: m.AnalysisPatternSelector,\n  }))\n);\nimport { AnalysisProgress } from './atoms/AnalysisProgress';\nconst SSEPanel = React.lazy(() => import('./panels/SSEPanel'));\n\n/**\n * OrchestratorInterface component provides a user interface for\n * interacting with the modular LLM orchestration system.\n */\nconst OrchestratorInterface = () => {\n  // State for form inputs\n  const [prompt, setPrompt] = useState('');\n  const [selectedModels, setSelectedModels] = useState([]);\n  const [leadModel, setLeadModel] = useState('');\n  const [analysisType, setAnalysisType] = useState('comparative');\n  const [selectedPattern, setSelectedPattern] = useState('gut');\n  const [useFeatherOrchestration, setUseFeatherOrchestration] = useState(true);\n\n  // State for available models and patterns\n  const [availableModels, setAvailableModels] = useState([]);\n  const [availablePatterns, setAvailablePatterns] = useState([]);\n  const [isLoadingModels, setIsLoadingModels] = useState(false);\n  const [isLoadingPatterns, setIsLoadingPatterns] = useState(false);\n\n  // State for results\n  const [results, setResults] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [correlationId, setCorrelationId] = useState('');\n\n  // State for 4-stage progress tracking\n  const [progressStatus, setProgressStatus] = useState('idle');\n  const [currentStage, setCurrentStage] = useState(0);\n  const [progressMessage, setProgressMessage] = useState('');\n\n  // State for detailed breakdown visibility\n  const [showDetailedBreakdown, setShowDetailedBreakdown] = useState(false);\n\n  // Simple toast notifications (success/warn/error)\n  const [toast, setToast] = useState({\n    visible: false,\n    type: 'info',\n    message: '',\n  });\n  const showToast = (type, message, timeoutMs = 3500) => {\n    setToast({ visible: true, type, message });\n    window.clearTimeout(showToast._t);\n    showToast._t = window.setTimeout(\n      () => setToast({ visible: false, type: 'info', message: '' }),\n      timeoutMs\n    );\n  };\n\n  // Load available models and patterns on component mount\n  useEffect(() => {\n    // Restore session\n    try {\n      const saved = JSON.parse(\n        localStorage.getItem('orchestrator_session') || 'null'\n      );\n      if (saved) {\n        if (typeof saved.prompt === 'string') setPrompt(saved.prompt);\n        if (Array.isArray(saved.selectedModels))\n          setSelectedModels(saved.selectedModels);\n        if (typeof saved.leadModel === 'string') setLeadModel(saved.leadModel);\n        if (typeof saved.selectedPattern === 'string')\n          setSelectedPattern(saved.selectedPattern);\n      }\n    } catch (_) {}\n\n    const loadModels = async () => {\n      setIsLoadingModels(true);\n      try {\n        const models = await getOrchestratorModels();\n        setAvailableModels(models);\n\n        // Set default selections if models are available\n        if (models.length > 0) {\n          setSelectedModels([models[0]]);\n          setLeadModel(models[0]);\n        }\n      } catch (err) {\n        setError('Failed to load available models');\n        console.error('Model loading error:', err);\n      } finally {\n        setIsLoadingModels(false);\n      }\n    };\n\n    const loadPatterns = async () => {\n      setIsLoadingPatterns(true);\n      try {\n        const patterns = await getOrchestratorPatterns();\n        setAvailablePatterns(patterns);\n      } catch (err) {\n        console.error('Pattern loading error:', err);\n        // Use fallback patterns if API fails\n        setAvailablePatterns([\n          { name: 'gut', description: 'Gut-based intuitive analysis' },\n          {\n            name: 'confidence',\n            description: 'Confidence scoring and agreement tracking',\n          },\n          {\n            name: 'critique',\n            description: 'Structured critique and revision process',\n          },\n          { name: 'fact_check', description: 'Rigorous fact-checking process' },\n          { name: 'perspective', description: 'Multi-perspective analysis' },\n          { name: 'scenario', description: 'Scenario-based analysis' },\n        ]);\n      } finally {\n        setIsLoadingPatterns(false);\n      }\n    };\n\n    loadModels();\n    loadPatterns();\n  }, []);\n\n  // Persist session\n  useEffect(() => {\n    try {\n      localStorage.setItem(\n        'orchestrator_session',\n        JSON.stringify({\n          prompt,\n          selectedModels,\n          leadModel,\n          selectedPattern,\n        })\n      );\n    } catch (_) {}\n  }, [prompt, selectedModels, leadModel, selectedPattern]);\n\n  // Handle model selection changes\n  const handleModelToggle = model => {\n    if (selectedModels.includes(model)) {\n      // Remove from selection (unless it's the last one or the lead model)\n      if (selectedModels.length > 1 && model !== leadModel) {\n        setSelectedModels(selectedModels.filter(m => m !== model));\n      }\n    } else {\n      // Add to selection\n      setSelectedModels([...selectedModels, model]);\n    }\n  };\n\n  // Handle lead model change\n  const handleLeadModelChange = model => {\n    setLeadModel(model);\n\n    // Ensure the lead model is selected\n    if (!selectedModels.includes(model)) {\n      setSelectedModels([...selectedModels, model]);\n    }\n  };\n\n  // Simulate 3-stage progress for Ultra Synthesis™ orchestration\n  const simulateFeatherProgress = () => {\n    const stages = [\n      {\n        stage: 1,\n        message:\n          'Stage 1: Initial Response - Getting parallel responses from selected models...',\n      },\n      {\n        stage: 2,\n        message:\n          'Stage 2: Peer Review & Revision - Models reviewing and refining responses...',\n      },\n      {\n        stage: 3,\n        message:\n          'Stage 3: Ultra Synthesis™ - Creating comprehensive final synthesis...',\n      },\n    ];\n\n    let stageIndex = 0;\n    setProgressStatus('analyzing');\n    setCurrentStage(1);\n    setProgressMessage(stages[0].message);\n\n    const progressInterval = setInterval(() => {\n      stageIndex++;\n      if (stageIndex < stages.length) {\n        setCurrentStage(stages[stageIndex].stage);\n        setProgressMessage(stages[stageIndex].message);\n      } else {\n        clearInterval(progressInterval);\n        setProgressStatus('complete');\n        setCurrentStage(3);\n        setProgressMessage('Ultra Synthesis™ orchestration complete');\n      }\n    }, 2000); // Update every 2 seconds\n\n    return progressInterval;\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate inputs\n    if (!prompt.trim()) {\n      setError('Please enter a prompt');\n      return;\n    }\n\n    if (selectedModels.length < 2) {\n      setError('Please select at least two models');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n    setResults(null);\n\n    try {\n      let response;\n      // Generate/refresh correlation id for this run\n      const newCorr = `corr_${Math.random().toString(36).slice(2, 12)}`;\n      setCorrelationId(newCorr);\n\n      if (useFeatherOrchestration) {\n        // Use Ultra Synthesis™ 3-stage orchestration\n        setProgressStatus('preparing');\n        setProgressMessage('Preparing Ultra Synthesis™ pipeline...');\n\n        // Start progress simulation\n        const progressInterval = simulateFeatherProgress();\n\n        response = await processWithFeatherOrchestration(\n          {\n            prompt,\n            models: selectedModels,\n            pattern: selectedPattern,\n            ultraModel: leadModel || selectedModels[0],\n            outputFormat: 'plain',\n          },\n          newCorr\n        );\n\n        clearInterval(progressInterval);\n        setProgressStatus('complete');\n      } else {\n        // Use legacy orchestration for backward compatibility\n        setProgressStatus('analyzing');\n        setProgressMessage('Processing with legacy orchestration...');\n\n        response = await processWithOrchestrator({\n          prompt,\n          models: selectedModels,\n          leadModel: leadModel || selectedModels[0],\n          analysisType,\n        });\n\n        setProgressStatus('complete');\n      }\n\n      setResults(response);\n\n      // Toast on completion or degradation\n      try {\n        if (response && response.status === 'success') {\n          const secs =\n            typeof response.processing_time === 'number'\n              ? response.processing_time.toFixed(2)\n              : undefined;\n          showToast(\n            'success',\n            `Analysis completed${secs ? ` in ${secs}s` : ''}.`\n          );\n        } else if (response && response.status === 'error') {\n          showToast('error', response.error || 'Analysis failed');\n        }\n        const degraded = response?.pipeline_info?.service_status;\n        if (degraded) {\n          showToast('warning', degraded);\n        }\n      } catch (_) {}\n    } catch (err) {\n      setError(`Error processing request: ${err.message}`);\n      setProgressStatus('error');\n      console.error('Processing error:', err);\n      showToast('error', err.message || 'Processing error');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Format model display name\n  const formatModelName = model => {\n    const parts = model.split('-');\n    if (parts.length > 1) {\n      return `${parts[0].charAt(0).toUpperCase() + parts[0].slice(1)} ${parts[1].toUpperCase()}`;\n    }\n    return model;\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">UltrAI Orchestrator</h1>\n        <p className=\"text-gray-600\">\n          Experience the power of Ultra Synthesis™ - multi-model intelligence\n          multiplication\n        </p>\n      </div>\n\n      {/* Orchestration Mode Toggle */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4 mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-semibold text-blue-900\">Orchestration Mode</h3>\n            <p className=\"text-sm text-blue-700\">\n              {useFeatherOrchestration\n                ? 'Ultra Synthesis™ - 3-Stage intelligence multiplication pipeline'\n                : 'Legacy Mode - Basic multi-model comparison'}\n            </p>\n          </div>\n          <label className=\"flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={useFeatherOrchestration}\n              onChange={e => setUseFeatherOrchestration(e.target.checked)}\n              className=\"mr-2\"\n            />\n            <span className=\"text-sm font-medium\">\n              Use Ultra Synthesis™ Orchestration (recommended)\n            </span>\n          </label>\n        </div>\n      </div>\n\n      {/* Error message */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4 mb-4\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      )}\n\n      {/* Progress display for sophisticated orchestration */}\n      {isProcessing && useFeatherOrchestration && (\n        <div className=\"mb-6\">\n          <AnalysisProgress\n            status={progressStatus}\n            currentStep={currentStage}\n            totalSteps={4}\n            statusMessage={progressMessage}\n            error={error ? new Error(error) : undefined}\n          />\n        </div>\n      )}\n\n      {/* Model availability warning */}\n      {availableModels.length < 2 && !isLoadingModels && (\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-start\">\n            <svg\n              className=\"w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n              />\n            </svg>\n            <div>\n              <h3 className=\"text-sm font-semibold text-red-800\">\n                Service Unavailable\n              </h3>\n              <p className=\"text-sm text-red-700 mt-1\">\n                UltraAI requires at least 2 different AI models for its\n                multi-model orchestration system. Currently, only{' '}\n                {availableModels.length} model\n                {availableModels.length === 1 ? ' is' : 's are'} available.\n              </p>\n              <p className=\"text-xs text-red-600 mt-2\">\n                Please ensure API keys are configured for at least 2 different\n                AI providers.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Input form */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n        {/* Main form column */}\n        <div className=\"lg:col-span-2\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"bg-white rounded-lg shadow-md p-6\"\n          >\n            {/* Prompt input */}\n            <div className=\"mb-6\">\n              <label\n                htmlFor=\"prompt\"\n                className=\"block text-sm font-medium text-gray-700 mb-2\"\n              >\n                Analysis Prompt\n              </label>\n              <textarea\n                id=\"prompt\"\n                data-testid=\"prompt-input\"\n                value={prompt}\n                onChange={e => setPrompt(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                rows={4}\n                placeholder=\"Enter your prompt for sophisticated multi-LLM analysis...\"\n              ></textarea>\n            </div>\n\n            {/* Model selection */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-sm font-medium text-gray-700 mb-3\">\n                Select AI Models ({selectedModels.length} selected)\n              </h3>\n\n              {isLoadingModels ? (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  {Array.from({ length: 6 }).map((_, i) => (\n                    <div key={i} className=\"border rounded-lg p-4\">\n                      <div className=\"animate-pulse space-y-3\">\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  {availableModels.map(model => (\n                    <div\n                      key={model}\n                      className={`border rounded-lg p-4 cursor-pointer transition-all ${\n                        selectedModels.includes(model)\n                          ? 'border-blue-500 bg-blue-50 shadow-sm'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => handleModelToggle(model)}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-start space-x-3\">\n                          <input\n                            type=\"checkbox\"\n                            id={`model-${model}`}\n                            checked={selectedModels.includes(model)}\n                            onChange={() => handleModelToggle(model)}\n                            className=\"mt-1\"\n                          />\n                          <div>\n                            <label\n                              htmlFor={`model-${model}`}\n                              className=\"font-medium text-sm cursor-pointer\"\n                            >\n                              {formatModelName(model)}\n                            </label>\n                            {selectedModels.includes(model) && (\n                              <div className=\"mt-2\">\n                                <label className=\"flex items-center text-xs text-gray-600\">\n                                  <input\n                                    type=\"radio\"\n                                    id={`lead-${model}`}\n                                    name=\"leadModel\"\n                                    checked={leadModel === model}\n                                    onChange={() =>\n                                      handleLeadModelChange(model)\n                                    }\n                                    className=\"mr-1\"\n                                  />\n                                  Ultra synthesis model\n                                </label>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Inline helper when insufficient models */}\n            {availableModels.length < 2 && !isLoadingModels && (\n              <div className=\"mt-2 text-xs text-gray-600\">\n                At least two models are required.{' '}\n                <a href=\"/admin\" className=\"text-blue-600 underline\">\n                  Configure API keys\n                </a>\n              </div>\n            )}\n\n            {/* Legacy analysis type (only for non-Feather mode) */}\n            {!useFeatherOrchestration && (\n              <div className=\"mb-6\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-3\">\n                  Basic Analysis Type (legacy display)\n                </h3>\n                <div className=\"flex space-x-6\">\n                  <label className=\"flex items-center cursor-pointer\">\n                    <input\n                      type=\"radio\"\n                      name=\"analysisType\"\n                      value=\"comparative\"\n                      checked={analysisType === 'comparative'}\n                      onChange={() => setAnalysisType('comparative')}\n                      className=\"mr-2\"\n                    />\n                    <span>Comparative Analysis</span>\n                  </label>\n                  <label className=\"flex items-center cursor-pointer\">\n                    <input\n                      type=\"radio\"\n                      name=\"analysisType\"\n                      value=\"factual\"\n                      checked={analysisType === 'factual'}\n                      onChange={() => setAnalysisType('factual')}\n                      className=\"mr-2\"\n                    />\n                    <span>Factual Analysis</span>\n                  </label>\n                </div>\n              </div>\n            )}\n\n            {/* Submit button */}\n            <div className=\"flex justify-end\">\n              <button\n                type=\"submit\"\n                data-testid=\"run-analysis\"\n                disabled={isProcessing || availableModels.length < 2}\n                title={\n                  availableModels.length < 2\n                    ? 'At least 2 AI models required for orchestration'\n                    : ''\n                }\n                className={`px-6 py-3 rounded-lg font-medium transition-all ${\n                  isProcessing || availableModels.length < 2\n                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                    : useFeatherOrchestration\n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 shadow-lg'\n                      : 'bg-blue-600 text-white hover:bg-blue-700'\n                }`}\n              >\n                {availableModels.length < 2\n                  ? 'Insufficient Models (2+ Required)'\n                  : isProcessing\n                    ? useFeatherOrchestration\n                      ? 'Running Ultra Synthesis™...'\n                      : 'Processing...'\n                    : useFeatherOrchestration\n                      ? 'Start Ultra Synthesis™'\n                      : 'Generate Response'}\n              </button>\n            </div>\n          </form>\n        </div>\n\n        {/* Pattern selector sidebar */}\n        <div className=\"lg:col-span-1\">\n          {useFeatherOrchestration && (\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Analysis Pattern</h3>\n              {isLoadingPatterns ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 4 }).map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <AnalysisPatternSelector\n                  patterns={availablePatterns.map(p => ({\n                    id: p.name,\n                    name: p.name,\n                    description: p.description,\n                  }))}\n                  selectedPattern={selectedPattern}\n                  onPatternChange={setSelectedPattern}\n                  disabled={isProcessing}\n                />\n              )}\n\n              <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                <p className=\"text-xs text-yellow-800\">\n                  <strong>Patent-Protected:</strong> Ultra Synthesis™\n                  represents sophisticated intellectual property with 3-stage\n                  intelligence multiplication.\n                </p>\n              </div>\n\n              <div className=\"mt-6\">\n                <React.Suspense\n                  fallback={\n                    <div className=\"text-sm text-gray-500\">\n                      Loading live events…\n                    </div>\n                  }\n                >\n                  <SSEPanel\n                    correlationId={correlationId}\n                    title=\"Live Model Events\"\n                  />\n                </React.Suspense>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Results */}\n      {results && (\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-semibold\">Analysis Results</h2>\n            {results.processing_time && (\n              <div className=\"text-sm text-gray-500\">\n                Processing time: {results.processing_time.toFixed(2)}s\n              </div>\n            )}\n          </div>\n\n          {/* Feather Orchestration Results */}\n          {useFeatherOrchestration && results.status === 'success' && (\n            <div className=\"space-y-6\">\n              {/* Ultra Synthesis™ - Primary Result (Prominent Display) */}\n              {results.ultra_response && (\n                <div className=\"mb-8\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h2 className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n                      Ultra Synthesis™\n                    </h2>\n                    <div className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n                      Intelligence Multiplication Complete\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 p-8 rounded-xl border-2 border-gradient-to-r from-purple-200 to-blue-200 shadow-lg\">\n                    <div className=\"prose max-w-none\">\n                      <div\n                        data-testid=\"ultra-synthesis\"\n                        className=\"text-lg leading-relaxed text-gray-800 whitespace-pre-wrap font-medium\"\n                      >\n                        {results.ultra_response}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Analysis Summary */}\n                  <div className=\"mt-4 bg-white p-4 rounded-lg border border-gray-200 shadow-sm\">\n                    <div className=\"flex flex-wrap items-center justify-between text-sm text-gray-600\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"font-medium\">Pattern:</span>\n                        <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n                          {results.pattern_used || selectedPattern}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"font-medium\">Models Used:</span>\n                        <span className=\"text-gray-700\">\n                          {results.models_used\n                            ? results.models_used.join(', ')\n                            : selectedModels.join(', ')}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Detailed Analysis Breakdown (Collapsible) */}\n              <div className=\"border-t pt-6\">\n                <button\n                  onClick={() =>\n                    setShowDetailedBreakdown(!showDetailedBreakdown)\n                  }\n                  className=\"flex items-center justify-between w-full text-left text-lg font-semibold text-gray-700 hover:text-gray-900 transition-colors\"\n                >\n                  <span>Detailed Analysis Breakdown</span>\n                  <svg\n                    className={`w-5 h-5 transform transition-transform ${showDetailedBreakdown ? 'rotate-180' : ''}`}\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M19 9l-7 7-7-7\"\n                    />\n                  </svg>\n                </button>\n\n                {showDetailedBreakdown && (\n                  <div className=\"mt-6 space-y-6\">\n                    {/* Stage 1: Initial Responses */}\n                    {results.initial_responses &&\n                      Object.keys(results.initial_responses).length > 0 && (\n                        <div>\n                          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                            <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm mr-2\">\n                              1\n                            </span>\n                            Initial Analysis Responses\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {Object.entries(results.initial_responses).map(\n                              ([model, response]) => (\n                                <div\n                                  key={model}\n                                  className=\"bg-gray-50 p-4 rounded-lg border\"\n                                >\n                                  <h4 className=\"font-medium mb-2 flex items-center\">\n                                    {formatModelName(model)}\n                                    {leadModel && leadModel.includes(model) && (\n                                      <span className=\"ml-2 text-xs bg-purple-100 text-purple-700 px-2 py-0.5 rounded\">\n                                        Ultra Model\n                                      </span>\n                                    )}\n                                  </h4>\n                                  <p className=\"text-sm whitespace-pre-wrap text-gray-700\">\n                                    {response}\n                                  </p>\n                                </div>\n                              )\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Stage 2: Meta Analysis */}\n                    {results.meta_responses &&\n                      Object.keys(results.meta_responses).length > 0 && (\n                        <div>\n                          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                            <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm mr-2\">\n                              2\n                            </span>\n                            Meta Analysis\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {Object.entries(results.meta_responses).map(\n                              ([model, response]) => (\n                                <div\n                                  key={model}\n                                  className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\"\n                                >\n                                  <h4 className=\"font-medium mb-2\">\n                                    {formatModelName(model)}\n                                  </h4>\n                                  <p className=\"text-sm whitespace-pre-wrap text-gray-700\">\n                                    {response}\n                                  </p>\n                                </div>\n                              )\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Stage 2: Peer Review & Revision (3-stage pipeline) */}\n                    {results.peer_review_responses &&\n                      Object.keys(results.peer_review_responses).length > 0 && (\n                        <div>\n                          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                            <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm mr-2\">\n                              2\n                            </span>\n                            Peer Review & Revision\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {Object.entries(results.peer_review_responses).map(\n                              ([model, response]) => (\n                                <div\n                                  key={model}\n                                  className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\"\n                                >\n                                  <h4 className=\"font-medium mb-2 flex items-center\">\n                                    {formatModelName(model)}\n                                    <span className=\"ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-0.5 rounded\">\n                                      Peer-Reviewed\n                                    </span>\n                                  </h4>\n                                  <p className=\"text-sm whitespace-pre-wrap text-gray-700\">\n                                    {response}\n                                  </p>\n                                </div>\n                              )\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                    {/* Stage 3: Ultra Synthesis is shown prominently above */}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Legacy Results Display */}\n          {!useFeatherOrchestration && (\n            <div className=\"space-y-6\">\n              {/* Initial responses */}\n              {results.initial_responses &&\n                results.initial_responses.length > 0 && (\n                  <div>\n                    <h3 className=\"text-lg font-medium mb-3\">\n                      Model Responses\n                    </h3>\n                    <div className=\"space-y-4\">\n                      {results.initial_responses.map((response, index) => (\n                        <div\n                          key={index}\n                          className=\"bg-gray-50 p-4 rounded border\"\n                        >\n                          <h4 className=\"font-medium mb-2\">\n                            {response.model} ({response.provider})\n                            {leadModel === response.model && (\n                              <span className=\"ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-0.5 rounded\">\n                                Primary\n                              </span>\n                            )}\n                          </h4>\n                          <p className=\"whitespace-pre-wrap text-sm\">\n                            {response.response}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n              {/* Synthesis */}\n              {results.synthesis && (\n                <div>\n                  <h3 className=\"text-lg font-medium mb-3\">\n                    Synthesized Response\n                  </h3>\n                  <div className=\"bg-green-50 p-4 rounded border border-green-200\">\n                    <h4 className=\"font-medium mb-2\">\n                      Synthesized by {results.synthesis.model} (\n                      {results.synthesis.provider})\n                    </h4>\n                    <p className=\"whitespace-pre-wrap\">\n                      {results.synthesis.response}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Error handling */}\n          {results.status === 'error' && (\n            <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n              <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Error</h3>\n              <p className=\"text-red-700\">\n                {results.error || 'An unknown error occurred'}\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Toast container */}\n      {toast.visible && (\n        <div\n          className={`fixed bottom-6 right-6 z-50 px-4 py-3 rounded shadow-lg text-sm ${\n            toast.type === 'success'\n              ? 'bg-green-600 text-white'\n              : toast.type === 'warning'\n                ? 'bg-yellow-600 text-white'\n                : toast.type === 'error'\n                  ? 'bg-red-600 text-white'\n                  : 'bg-gray-800 text-white'\n          }`}\n          role=\"status\"\n        >\n          {toast.message}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OrchestratorInterface;\n","import React from 'react';\nimport OrchestratorInterface from '../components/OrchestratorInterface';\n\n/**\n * Page for the orchestrator interface\n */\nconst OrchestratorPage: React.FC = () => {\n  return (\n    <div className=\"container mx-auto py-6 px-4\">\n      <h1 className=\"text-3xl font-bold mb-8\">UltrAI Orchestrator</h1>\n      <OrchestratorInterface />\n    </div>\n  );\n};\n\nexport default OrchestratorPage;\n"],"file":"assets/OrchestratorPage-DjTex0n2.js"}