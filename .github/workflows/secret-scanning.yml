name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@v3.63.7
        with:
          # Scan the entire history
          base: ""
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for hardcoded secrets in Python
        run: |
          echo "Checking for hardcoded secrets in Python files..."
          
          # Define patterns to search for
          patterns=(
            'SECRET.*=.*["\'][^"\']*["\']'
            'API_KEY.*=.*["\'][^"\']*["\']'
            'TOKEN.*=.*["\'][^"\']*["\']'
            'PASSWORD.*=.*["\'][^"\']*["\']'
            'PRIVATE.*=.*["\'][^"\']*["\']'
          )
          
          # Exclude patterns that are safe
          exclude_patterns=(
            'os.getenv'
            'os.environ'
            'getenv'
            'import'
            'def '
            'class '
            '# '
            'fallback'
            'example'
            'dummy'
            'test'
            'mock'
          )
          
          found_secrets=0
          
          for pattern in "${patterns[@]}"; do
            echo "Checking pattern: $pattern"
            
            # Search for the pattern
            results=$(grep -r -E "$pattern" --include="*.py" --exclude-dir=".git" --exclude-dir="__pycache__" --exclude-dir="venv" --exclude-dir=".venv" --exclude-dir="test_minimal_env" . || true)
            
            # Filter out safe patterns
            if [ -n "$results" ]; then
              while IFS= read -r line; do
                is_safe=false
                for exclude in "${exclude_patterns[@]}"; do
                  if echo "$line" | grep -q "$exclude"; then
                    is_safe=true
                    break
                  fi
                done
                
                if [ "$is_safe" = false ]; then
                  echo "❌ Potential secret found: $line"
                  found_secrets=$((found_secrets + 1))
                fi
              done <<< "$results"
            fi
          done
          
          if [ $found_secrets -gt 0 ]; then
            echo "❌ Found $found_secrets potential secrets!"
            exit 1
          else
            echo "✅ No hardcoded secrets found in Python files"
          fi
          
      - name: Check for secrets in frontend bundles
        run: |
          echo "Checking for secrets in frontend build..."
          
          # Build frontend if dist doesn't exist
          if [ ! -d "frontend/dist" ]; then
            echo "Frontend dist not found, skipping bundle check"
            exit 0
          fi
          
          # Search for common secret patterns in built files
          patterns=(
            'api_key'
            'apiKey'
            'API_KEY'
            'secret'
            'SECRET'
            'private_key'
            'privateKey'
            'PRIVATE_KEY'
            'password'
            'PASSWORD'
            'token'
            'TOKEN'
          )
          
          found_secrets=0
          
          for pattern in "${patterns[@]}"; do
            # Search in JS bundles
            results=$(grep -i "$pattern" frontend/dist/assets/*.js 2>/dev/null || true)
            
            if [ -n "$results" ]; then
              # Check if it's actually a value assignment (not just a key name)
              if echo "$results" | grep -E "${pattern}['\"]?\s*[:=]\s*['\"][^'\"]+['\"]" >/dev/null; then
                echo "❌ Potential secret pattern found in frontend bundle: $pattern"
                found_secrets=$((found_secrets + 1))
              fi
            fi
          done
          
          if [ $found_secrets -gt 0 ]; then
            echo "❌ Found $found_secrets potential secret patterns in frontend bundles!"
            echo "Make sure all secrets are loaded from environment variables, not bundled."
            exit 1
          else
            echo "✅ No secrets found in frontend bundles"
          fi
          
      - name: Validate .env.example
        run: |
          echo "Validating .env.example file..."
          
          if [ ! -f ".env.example" ]; then
            echo "⚠️ .env.example file not found"
            exit 0
          fi
          
          # Check that .env.example doesn't contain actual secrets
          if grep -E '=.+[a-zA-Z0-9]{20,}' .env.example; then
            echo "❌ .env.example appears to contain actual secret values!"
            echo "It should only contain placeholder values."
            exit 1
          else
            echo "✅ .env.example contains only placeholder values"
          fi