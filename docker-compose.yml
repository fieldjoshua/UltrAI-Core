version: '3.8'

networks:
  ultra-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  model-runner-data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ultra-postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ./docker/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ultra_dev_password}
      - POSTGRES_USER=${POSTGRES_USER:-ultra}
      - POSTGRES_DB=${POSTGRES_DB:-ultra_dev}
    ports:
      - "5432:5432"
    networks:
      - ultra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ultra}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: ${RESTART_POLICY:-unless-stopped}

  # Redis Cache and Message Broker
  redis:
    image: redis:7
    container_name: ultra-redis
    volumes:
      - redis-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - ultra-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: ${RESTART_POLICY:-unless-stopped}

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-final}
    image: ultraai/backend:${TAG:-latest}
    container_name: ultra-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database connection
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ultra}:${POSTGRES_PASSWORD:-ultra_dev_password}@postgres:5432/${POSTGRES_DB:-ultra_dev}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-ultra_dev}
      - DB_USER=${POSTGRES_USER:-ultra}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-ultra_dev_password}
      
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - DEBUG=${DEBUG:-true}
      
      # Feature flags
      - USE_MOCK=${USE_MOCK:-true}
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      - ENABLE_MOCK_LLM=${ENABLE_MOCK_LLM:-true}
      - ENABLE_DOCUMENT_PROCESSING=${ENABLE_DOCUMENT_PROCESSING:-true}
      - ENABLE_AUTH=${ENABLE_AUTH:-false}
      
      # JWT settings
      - JWT_SECRET=${JWT_SECRET:-super_secret_jwt_key_for_development_only}
      
      # Database connection settings
      - DB_CONNECTION_RETRIES=30
      - DB_CONNECTION_RETRY_INTERVAL=2
      
      # Pass through API keys if available
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      
      # Docker Model Runner configuration
      - ENABLE_MODEL_RUNNER=${ENABLE_MODEL_RUNNER:-false}
      - MODEL_RUNNER_URL=http://model-runner:8080
      - DEFAULT_LOCAL_MODEL=${DEFAULT_MODEL:-phi3:mini}
      - USE_LOCAL_MODELS_WHEN_OFFLINE=${USE_LOCAL_MODELS_WHEN_OFFLINE:-true}
      - LOCAL_MODEL_TIMEOUT=${LOCAL_MODEL_TIMEOUT:-60000}
    volumes:
      - ./backend:/app/backend
      - ./scripts:/app/scripts
      - ./src:/app/src  # Added src directory for LLM implementation
      - ./alembic.ini:/app/alembic.ini
      - ./logs:/app/logs
      - ./data:/app/data
      - ./document_storage:/app/document_storage
      - ./temp:/app/temp
      - ./temp_uploads:/app/temp_uploads
    ports:
      - "${PORT:-8000}:8000"
    networks:
      - ultra-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    command: ${BACKEND_COMMAND:-./scripts/start-dev.sh}
    restart: ${RESTART_POLICY:-unless-stopped}

  # Background Worker (optional)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-final}
    image: ultraai/backend:${TAG:-latest}
    container_name: ultra-worker
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # Database connection
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ultra}:${POSTGRES_PASSWORD:-ultra_dev_password}@postgres:5432/${POSTGRES_DB:-ultra_dev}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-ultra_dev}
      - DB_USER=${POSTGRES_USER:-ultra}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-ultra_dev_password}
      
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Application settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      
      # Feature flags
      - USE_MOCK=${USE_MOCK:-true}
      - ENABLE_MOCK_LLM=${ENABLE_MOCK_LLM:-true}
      
      # Pass through API keys if available
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      
      # Docker Model Runner configuration
      - ENABLE_MODEL_RUNNER=${ENABLE_MODEL_RUNNER:-false}
      - MODEL_RUNNER_URL=http://model-runner:8080
      - DEFAULT_LOCAL_MODEL=${DEFAULT_MODEL:-phi3:mini}
      - USE_LOCAL_MODELS_WHEN_OFFLINE=${USE_LOCAL_MODELS_WHEN_OFFLINE:-true}
      - LOCAL_MODEL_TIMEOUT=${LOCAL_MODEL_TIMEOUT:-60000}
    volumes:
      - ./backend:/app/backend
      - ./scripts:/app/scripts
      - ./src:/app/src  # Added src directory for LLM implementation
      - ./logs:/app/logs
      - ./data:/app/data
      - ./document_storage:/app/document_storage
    networks:
      - ultra-network
    command: ./scripts/worker.sh
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles:
      - with-worker

  # Frontend Development Server (optional)
  frontend:
    image: node:18-alpine
    container_name: ultra-frontend
    working_dir: /app
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=http://localhost:8000/api  # For browser access, use localhost
      - VITE_IS_DOCKER=true
    volumes:
      - ./frontend:/app
    ports:
      - "3009:3009"
    depends_on:
      - backend
    command: sh -c "npm install && npm run dev -- --host"
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - ultra-network
    profiles:
      - with-frontend
      
  # Docker Model Runner Service (optional)
  model-runner:
    image: docker/modelrunner-api:latest
    container_name: ultra-model-runner
    volumes:
      - model-runner-data:/root/.cache/modelrunner
    ports:
      - "${MODEL_RUNNER_PORT:-8080}:8080"
    environment:
      - GPU_ENABLED=${GPU_ENABLED:-false}
      - DEFAULT_MODEL=${DEFAULT_MODEL:-phi3:mini}
      - AVAILABLE_MODELS=${AVAILABLE_MODELS:-phi3:mini,llama3:8b,mistral:7b}
      - MODEL_CACHE_SIZE_MB=${MODEL_CACHE_SIZE_MB:-8192}
      - LOG_LEVEL=${MODEL_RUNNER_LOG_LEVEL:-info}
    networks:
      - ultra-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/models"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles:
      - with-model-runner