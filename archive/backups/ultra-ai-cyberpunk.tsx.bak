'use client'

import React, { useState, useEffect } from 'react'
import { Button } from "./ui/button"
import { Checkbox } from "./ui/checkbox"
import { Label } from "./ui/label"
import { Loader2, User, Zap, Shield, Lock } from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const llmOptions = [
  { id: 'deepseek-r1', label: 'DeepSeek R1', price: 0.5, icon: Brain, description: "Developed by China's DeepSeek, R1 is an open-source large language model excelling in mathematics, coding, and reasoning tasks. It employs reinforcement learning to enhance step-by-step logical reasoning, achieving performance comparable to leading models like OpenAI's o1.", isOpenSource: true },
  { id: 'openai-gpt4o', label: 'OpenAI GPT-4o', price: 5, icon: Zap, description: "OpenAI's GPT-4o, introduced in mid-2024, is a multimodal model capable of processing and generating text, audio, and visual data in real-time. It employs advanced reasoning techniques, enabling complex problem-solving tasks across various domains." },
  { id: 'gemini-1-5', label: 'Google Gemini 1.5', price: 4, icon: Cloud, description: "Released in early 2024, Google's Gemini 1.5 is a multimodal AI model designed to handle text, images, and other data types. It features a mixture-of-experts architecture, allowing for efficient scaling and improved performance across various tasks." },
  { id: 'llama-3', label: 'Meta\'s Llama 3.1', price: 0.5, icon: Database, description: "Meta's Llama 3.1 is an open-source large language model known for its scalability and performance. It offers a range of parameter sizes, catering to diverse research and application needs.", isOpenSource: true },
  { id: 'claude-3', label: 'Anthropic\'s Claude 3.5', price: 3, icon: Shield, description: "Claude 3.5, developed by Anthropic, focuses on safety and interpretability. It is designed to generate helpful and harmless responses, emphasizing ethical AI deployment." },
  { id: 'mixtral', label: 'Mistral\'s Mixtral 8x7B', price: 0.5, icon: Brain, description: "Mistral's Mixtral 8x7B employs a mixture of experts architecture, allowing for efficient scaling and improved performance in various tasks.", isOpenSource: true },
  { id: 'qwen-2', label: 'Alibaba\'s Qwen 2.5-Max', price: 0.5, icon: Cloud, description: "Alibaba's Qwen 2.5-Max is a large language model that has demonstrated strong performance in benchmarks, particularly in the Chinese language. It is part of Alibaba's ongoing efforts to advance AI research and applications.", isOpenSource: true },
  { id: 'nova-pro', label: 'Amazon\'s Nova Pro', price: 3, icon: Cloud, description: "Amazon's Nova Pro is part of the Nova series, offering advanced natural language understanding and generation capabilities, optimized for various enterprise applications." },
  { id: 'granite', label: 'IBM\'s Granite', price: 3, icon: Database, description: "IBM's Granite foundation models are designed for business applications, focusing on robustness and scalability. They are integrated into IBM's AI offerings to enhance enterprise solutions." },
  { id: 'deepseek-v3', label: 'DeepSeek V3', price: 0.5, icon: Brain, description: "An evolution of DeepSeek's earlier models, V3 continues to build on efficient training methodologies, delivering high performance across various AI tasks.", isOpenSource: true }
]

const steps = ['Analyzing prompt', 'Generating content', 'Packaging results']

const calculatePrice = (selectedLLMs: string[], ultraLLM: string | null, anonymizeInquiry: boolean) => {
  let total = 0;
  const premiumLLMs = selectedLLMs.filter(llm => !llmOptions.find(o => o.id === llm)?.isOpenSource);
  const openSourceLLMs = selectedLLMs.filter(llm => llmOptions.find(o => o.id === llm)?.isOpenSource);

  premiumLLMs.forEach((llm, index) => {
    const option = llmOptions.find(o => o.id === llm);
    if (option) {
      total += option.price * (index + 1);
    }
  });

  openSourceLLMs.forEach(llm => {
    const option = llmOptions.find(o => o.id === llm);
    if (option) {
      total += option.price;
    }
  });

  if (ultraLLM) {
    const ultraOption = llmOptions.find(o => o.id === ultraLLM);
    if (ultraOption) {
      total += ultraOption.isOpenSource ? 1 : ultraOption.price;
    }
  }

  if (anonymizeInquiry) {
    total *= 0.8; // 20% discount for anonymization
  }

  return Math.min(total, 10); // Cap the total at $10
};

export function UltraAiCyberpunk() {
  const [prompt, setPrompt] = useState('')
  const [selectedLLMs, setSelectedLLMs] = useState<string[]>([])
  const [ultraLLM, setUltraLLM] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [currentStep, setCurrentStep] = useState(0)
  const [isComplete, setIsComplete] = useState(false)
  const [output, setOutput] = useState('')
  const [calculatedPrice, setCalculatedPrice] = useState(0)
  const [userCredit, setUserCredit] = useState(100)
  const [keepDataPrivate, setKeepDataPrivate] = useState(false)
  const [useNoTraceEncryption, setUseNoTraceEncryption] = useState(false)
  const [factChecker, setFactChecker] = useState(false)
  const [applyPreferences, setApplyPreferences] = useState(false)
  const [anonymizeInquiry, setAnonymizeInquiry] = useState(false)
  const [previewPrompt, setPreviewPrompt] = useState('')

  useEffect(() => {
    setCalculatedPrice(calculatePrice(selectedLLMs, ultraLLM, anonymizeInquiry));
  }, [selectedLLMs, ultraLLM, anonymizeInquiry]);

  const handleLLMChange = (llmId: string) => {
    setSelectedLLMs(prev => 
      prev.includes(llmId) ? prev.filter(id => id !== llmId) : [...prev, llmId]
    )
  }

  const handleUltraChange = (llmId: string) => {
    setUltraLLM(prev => prev === llmId ? null : llmId)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (selectedLLMs.length < 2 || !ultraLLM || calculatedPrice > userCredit) return;
    setIsProcessing(true)
    setIsComplete(false)
    setOutput('')

    for (let i = 0; i < steps.length; i++) {
      setCurrentStep(i)
      await new Promise(resolve => setTimeout(resolve, 2000))
    }

    const simulatedOutput = `Processed with: ${selectedLLMs.join(', ')}\nULTRA mode: ${ultraLLM}\nPrompt: ${prompt}\nKeep Data Private: ${keepDataPrivate}\nUse NoTrace Encryption: ${useNoTraceEncryption}\nFact Checker: ${factChecker}\nApply Preferences: ${applyPreferences}\nAnonymize Inquiry: ${anonymizeInquiry}`
    setOutput(simulatedOutput)

    setUserCredit(prevCredit => prevCredit - calculatedPrice)
    setIsProcessing(false)
    setIsComplete(true)
  }

  const openSourceLLMs = llmOptions.filter(llm => llm.isOpenSource);
  const premiumLLMs = llmOptions.filter(llm => !llm.isOpenSource);

  return (
    <div className="min-h-screen bg-gray-900 text-cyan-300 font-mono p-8" style={{backgroundImage: 'radial-gradient(circle, #1a0b2e 0%, #000000 100%)'}}>
      <div className="max-w-6xl mx-auto bg-black border-4 border-cyan-500 rounded-lg shadow-2xl shadow-cyan-500 p-8 relative overflow-hidden">
        <div className="absolute inset-0 bg-grid-pattern opacity-10 animate-backgroundShift"></div>
        <div className="relative z-10">
          <div className="flex justify-between items-center mb-12">
            <h1 className="text-8xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 via-cyan-500 to-green-500 animate-neonPulse">
              UltrAI
            </h1>
            <User className="w-12 h-12 text-cyan-500 animate-pulse" />
          </div>
          
          <div className="grid grid-cols-3 gap-8">
            <div className="col-span-2 space-y-8">
              <form onSubmit={handleSubmit} className="space-y-8">
                <div className="space-y-4">
                  <Label className="text-2xl font-bold text-green-400">Select LLMs: <span className="text-sm font-normal text-pink-400">(choose at least two)<sup>1</sup></span></Label>
                  <div className="grid grid-cols-2 gap-4">
                    {openSourceLLMs.map((llm) => (
                      <div key={llm.id} className="flex items-center space-x-4 bg-yellow-900 bg-opacity-30 p-4 rounded-lg border border-yellow-500 hover:bg-opacity-50 transition-all duration-300">
                        <Checkbox 
                          id={`llm-${llm.id}`} 
                          checked={selectedLLMs.includes(llm.id)}
                          onCheckedChange={() => handleLLMChange(llm.id)}
                          className="border-yellow-500"
                        />
                        <Label htmlFor={`llm-${llm.id}`} className="flex items-center space-x-2 text-yellow-300">
                          <llm.icon className="w-6 h-6 text-yellow-400" />
                          <span>{llm.label}</span>
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger>
                                <Info className="w-4 h-4 text-yellow-500" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs text-xs">{llm.description}</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </Label>
                      </div>
                    ))}
                    {premiumLLMs.map((llm) => (
                      <div key={llm.id} className="flex items-center space-x-4 bg-cyan-900 bg-opacity-30 p-4 rounded-lg border border-cyan-500 hover:bg-opacity-50 transition-all duration-300">
                        <Checkbox 
                          id={`llm-${llm.id}`} 
                          checked={selectedLLMs.includes(llm.id)}
                          onCheckedChange={() => handleLLMChange(llm.id)}
                          className="border-pink-500"
                        />
                        <Label htmlFor={`llm-${llm.id}`} className="flex items-center space-x-2 text-cyan-300">
                          <llm.icon className="w-6 h-6 text-green-400" />
                          <span>{llm.label}</span>
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger>
                                <Info className="w-4 h-4 text-cyan-500" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs text-xs">{llm.description}</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </Label>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-4">
                  <Label className="text-2xl font-bold text-green-400">WHO IS ULTRA? <span className="text-sm font-normal text-pink-400">(select only one)<sup>2</sup></span></Label>
                  <div className="grid grid-cols-2 gap-4">
                    {llmOptions.map((llm) => (
                      <div key={`ultra-${llm.id}`} className={`flex items-center space-x-4 ${llm.isOpenSource ? 'bg-yellow-900' : 'bg-pink-900'} bg-opacity-30 p-4 rounded-lg border ${llm.isOpenSource ? 'border-yellow-500' : 'border-pink-500'} hover:bg-opacity-50 transition-all duration-300`}>
                        <Checkbox 
                          id={`ultra-${llm.id}`} 
                          checked={ultraLLM === llm.id}
                          onCheckedChange={() => handleUltraChange(llm.id)}
                          className={`border-${llm.isOpenSource ? 'yellow' : 'cyan'}-500`}
                        />
                        <Label htmlFor={`ultra-${llm.id}`} className="flex items-center space-x-2 text-cyan-300">
                          <llm.icon className={`w-6 h-6 ${llm.isOpenSource ? 'text-yellow-400' : 'text-cyan-400'}`} />
                          <span>{llm.label}</span>
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger>
                                <Info className={`w-4 h-4 ${llm.isOpenSource ? 'text-yellow-500' : 'text-pink-500'}`} />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs text-xs">{llm.description}</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </Label>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="text-2xl font-bold text-green-400 mt-8 mb-4">Enhancements</h3>
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4 bg-green-900 bg-opacity-30 p-4 rounded-lg border border-green-500 hover:bg-opacity-50 transition-all duration-300">
                      <Checkbox 
                        id="keep-data-private"
                        checked={keepDataPrivate}
                        onCheckedChange={() => setKeepDataPrivate(!keepDataPrivate)}
                        className="border-cyan-500"
                      />
                      <Label htmlFor="keep-data-private" className="flex items-center space-x-2 text-cyan-300">
                        <Shield className="w-6 h-6 text-green-400" />
                        <span>Keep my data private<sup>3</sup></span>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-4 bg-green-900 bg-opacity-30 p-4 rounded-lg border border-green-500 hover:bg-opacity-50 transition-all duration-300">
                      <Checkbox 
                        id="no-trace-encryption"
                        checked={useNoTraceEncryption}
                        onCheckedChange={() => setUseNoTraceEncryption(!useNoTraceEncryption)}
                        className="border-cyan-500"
                      />
                      <Label htmlFor="no-trace-encryption" className="flex items-center space-x-2 text-cyan-300">
                        <Lock className="w-6 h-6 text-green-400" />
                        <span>Private and NoTrace Encryption<sup>4</sup></span>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-4 bg-green-900 bg-opacity-30 p-4 rounded-lg border border-green-500 hover:bg-opacity-50 transition-all duration-300">
                      <Checkbox 
                        id="fact-checker"
                        checked={factChecker}
                        onCheckedChange={() => setFactChecker(!factChecker)}
                        className="border-cyan-500"
                      />
                      <Label htmlFor="fact-checker" className="flex items-center space-x-2 text-cyan-300">
                        <CheckCircle className="w-6 h-6 text-green-400" />
                        <span>Fact Checker</span>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-4 bg-green-900 bg-opacity-30 p-4 rounded-lg border border-green-500 hover:bg-opacity-50 transition-all duration-300">
                      <Checkbox 
                        id="apply-preferences"
                        checked={applyPreferences}
                        onCheckedChange={() => setApplyPreferences(!applyPreferences)}
                        className="border-cyan-500"
                      />
                      <Label htmlFor="apply-preferences" className="flex items-center space-x-2 text-cyan-300">
                        <Settings className="w-6 h-6 text-green-400" />
                        <span>Apply My Preferences</span>
                      </Label>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="text-2xl font-bold text-green-400 mt-8 mb-4">Deductions</h3>
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4 bg-yellow-900 bg-opacity-30 p-4 rounded-lg border border-yellow-500 hover:bg-opacity-50 transition-all duration-300">
                      <Checkbox 
                        id="anonymize-inquiry"
                        checked={anonymizeInquiry}
                        onCheckedChange={() => setAnonymizeInquiry(!anonymizeInquiry)}
                        className="border-cyan-500"
                      />
                      <Label htmlFor="anonymize-inquiry" className="flex items-center space-x-2 text-yellow-300">
                        <Key className="w-6 h-6 text-yellow-400" />
                        <span className="text-sm">Save me money, allow this inquiry to be anonymized, and inform models and third party research</span>
                      </Label>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <Label htmlFor="prompt" className="text-2xl font-bold text-green-400">Enter your prompt:<sup>5</sup></Label>
                  <textarea
                    id="prompt"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="Enter your cyberpunk prompt here..."
                    className="w-full h-40 p-4 bg-gray-800 border-2 border-cyan-500 rounded-lg text-cyan-300 placeholder-cyan-600 focus:ring-4 focus:ring-green-500 focus:border-transparent transition-all duration-300"
                    disabled={isProcessing}
                  />
                  <div className="mt-4">
                    <Label htmlFor="file-upload" className="text-xl font-bold text-green-400">Attach File:</Label>
                    <input
                      id="file-upload"
                      type="file"
                      className="mt-2 block w-full text-cyan-300 bg-gray-800 border-2 border-cyan-500 rounded-lg file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-cyan-900 file:text-cyan-300 hover:file:bg-cyan-800"
                    />
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <div className="text-3xl font-bold text-green-400 animate-pulse">
                    Estimated Price: <span className="text-pink-500">${calculatedPrice.toFixed(2)}</span><sup>6</sup>
                  </div>
                  <Button 
                    type="submit" 
                    disabled={isProcessing || !prompt || selectedLLMs.length < 2 || !ultraLLM || calculatedPrice > userCredit}
                    className="px-8 py-4 bg-gradient-to-r from-cyan-500 via-pink-500 to-green-500 text-black font-bold text-xl rounded-full hover:from-green-500 hover:via-cyan-500 hover:to-pink-500 transition-all duration-300 animate-pulse disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isProcessing ? <Loader2 className="mr-2 h-6 w-6 animate-spin" /> : 'PROCESS'}
                  </Button>
                </div>
              </form>

              {isProcessing && (
                <div className="mt-8 space-y-4">
                  {steps.map((step, index) => (
                    <div key={step} className="flex items-center space-x-4">
                      <div className={`w-8 h-8 rounded-full ${index <= currentStep ? 'bg-green-500' : 'bg-cyan-900'} animate-pulse`}></div>
                      <span className={`text-xl ${index <= currentStep ? 'text-green-400' : 'text-cyan-600'} animate-pulse`}>{step}</span>
                    </div>
                  ))}
                </div>
              )}

              {isComplete && (
                <div className="mt-8 space-y-4">
                  <div className="p-6 bg-cyan-900 bg-opacity-30 rounded-lg border-2 border-cyan-500 animate-glitch">
                    <pre className="whitespace-pre-wrap text-green-400">{output}</pre>
                  </div>
                  <Button 
                    onClick={() => console.log('Downloading zip file with content:', output)} 
                    className="w-full px-8 py-4 bg-gradient-to-r from-green-500 via-cyan-500 to-pink-500 text-black font-bold text-xl rounded-full hover:from-pink-500 hover:via-green-500 hover:to-cyan-500 transition-all duration-300 animate-pulse"
                  >
                    DOWNLOAD ZIP
                  </Button>
                </div>
              )}
            </div>

            <div className="space-y-8">
              <div className="p-6 bg-green-900 bg-opacity-30 rounded-lg border-2 border-green-500 animate-flicker">
                <h2 className="text-3xl font-bold text-green-400 mb-4">Credit Balance</h2>
                <div className="text-5xl font-bold text-pink-500">${userCredit.toFixed(2)}</div>
                <Button 
                  variant="outline" className="mt-4 w-full px-6 py-3 bg-black border-2 border-green-500 text-green-400 font-bold text-xl rounded-full hover:bg-green-900 hover:text-cyan-300 transition-all duration-300"
                >
                  ADD MORE CREDITS
                </Button>
              </div>

              <div className="p-6 bg-cyan-900 bg-opacity-30 rounded-lg border-2 border-cyan-500">
                <h2 className="text-3xl font-bold text-cyan-400 mb-4">Help me decide & Preview</h2>
                <textarea
                  value={previewPrompt}
                  onChange={(e) => setPreviewPrompt(e.target.value)}
                  placeholder="Enter your preview prompt here..."
                  className="w-full h-40 p-4 bg-gray-800 border-2 border-cyan-500 rounded-lg text-cyan-300 placeholder-cyan-600 focus:ring-4 focus:ring-green-500 focus:border-transparent transition-all duration-300 mb-4"
                />
                <Button 
                  variant="outline" 
                  className="w-full px-6 py-3 bg-black border-2 border-cyan-500 text-cyan-400 font-bold text-xl rounded-full hover:bg-cyan-900 hover:text-green-300 transition-all duration-300"
                  onClick={() => console.log('Help me decide clicked')}
                >
                  Suggest LLMs
                </Button>
              </div>

              <div className="p-6 bg-pink-900 bg-opacity-30 rounded-lg border-2 border-pink-500">
                <h2 className="text-3xl font-bold text-pink-400 mb-4">UltrAI Stats</h2>
                <ul className="space-y-2 text-cyan-300">
                  <li>Processed Prompts: 1,337</li>
                  <li>Ultra Boosts: 42</li>
                  <li>Encryption Level: MAXIMUM</li>
                  <li>Neural Links: 7,777</li>
                </ul>
              </div>

              <div className="p-6 bg-cyan-900 bg-opacity-30 rounded-lg border-2 border-cyan-500">
                <h2 className="text-3xl font-bold text-cyan-400 mb-4">UltrAIMe</h2>
                <Button 
                  variant="outline" 
                  className="w-full px-6 py-3 bg-black border-2 border-cyan-500 text-cyan-400 font-bold text-xl rounded-full hover:bg-cyan-900 hover:text-green-300 transition-all duration-300 overflow-hidden"
                >
                  <span className="block truncate">Update Personal Preferences</span>
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-8 text-sm text-cyan-400 space-y-2 animate-pulse">
        <p><sup>1</sup> The price skyrockets with every neural engine you choose, based on black market rates.</p>
        <p><sup>2</sup> Selecting an ULTRA LLM doubles its contribution to the total price and unlocks hidden potentials.</p>
        <p><sup>3</sup> Data NOT used for training purposes, cost based on dark web pricing.</p>
        <p><sup>4</sup> It never happened. We were never here.</p>
        <p><sup>5</sup> The longer and more complex the prompt, the higher the neural load and price.</p>
        <p><sup>6</sup> UltrAI guaranteed lowest price in the multiverse or your credits back.</p>
      </div>
    </div>
  )
}