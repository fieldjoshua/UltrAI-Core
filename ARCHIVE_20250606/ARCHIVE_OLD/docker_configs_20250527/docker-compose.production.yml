version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ultra-postgres
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: ${DB_USER:-ultrauser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-ultra}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - ultra-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ultrauser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ultra-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data_prod:/data
    networks:
      - ultra-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: ultra-backend:latest
    container_name: ultra-backend
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.production
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./document_storage:/app/document_storage
      - ./logs:/app/logs
    networks:
      - ultra-network
    restart: always
    command: gunicorn backend.app:app -c gunicorn_conf.py

  frontend:
    image: ultra-frontend:latest
    container_name: ultra-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - ultra-network
    restart: always

  nginx:
    image: nginx:alpine
    container_name: ultra-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - backend
      - frontend
    networks:
      - ultra-network
    restart: always

networks:
  ultra-network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod: