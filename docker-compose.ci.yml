version: '3.8'

networks:
  ultra-network:
    driver: bridge

services:
  # PostgreSQL Database for CI
  postgres:
    image: postgres:15
    container_name: ultra-postgres-ci
    environment:
      - POSTGRES_PASSWORD=ultra_ci_password
      - POSTGRES_USER=ultra_ci
      - POSTGRES_DB=ultra_ci
    networks:
      - ultra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ultra_ci"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # Redis for CI
  redis:
    image: redis:7
    container_name: ultra-redis-ci
    command: redis-server --requirepass redis_ci_password --appendonly no
    networks:
      - ultra-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_ci_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    tmpfs:
      - /data  # Use tmpfs for faster CI tests

  # Backend Service for CI
  backend-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: dependencies
    image: ultraai/backend:test
    container_name: ultra-backend-test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Fixed values for CI environment
      - DATABASE_URL=postgresql://ultra_ci:ultra_ci_password@postgres:5432/ultra_ci
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ultra_ci
      - DB_USER=ultra_ci
      - DB_PASSWORD=ultra_ci_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_ci_password
      - REDIS_URL=redis://:redis_ci_password@redis:6379/0
      - ENVIRONMENT=test
      - LOG_LEVEL=debug
      - USE_MOCK=true
      - ENABLE_MOCK_LLM=true
      - JWT_SECRET=test_secret_key
      - DB_CONNECTION_RETRIES=5
      - DB_CONNECTION_RETRY_INTERVAL=1
    volumes:
      - ./backend:/app/backend
      - ./tests:/app/tests
      - ./alembic.ini:/app/alembic.ini
      - ./scripts:/app/scripts
    networks:
      - ultra-network
    command: >
      bash -c "
        python -m backend.utils.wait_for_db &&
        alembic upgrade head &&
        python -m pytest -xvs tests/ --cov=backend --cov-report=xml:/app/coverage.xml
      "