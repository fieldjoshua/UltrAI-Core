repos:
  # Gitleaks secret scanning
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.1
    hooks:
      - id: gitleaks
        name: Detect secrets with gitleaks
        entry: gitleaks detect --source . --verbose --redact --config=.gitleaks.toml
        language: system
        pass_filenames: false

  # Additional secret scanning
  - repo: local
    hooks:
      - id: check-secrets
        name: Check for hardcoded secrets
        entry: bash -c '
          echo "Checking for hardcoded secrets..."
          
          # Check Python files
          if grep -r -E "(JWT_SECRET|API_KEY|TOKEN|PASSWORD).*=.*[\"'\''][^\"'\'']*[\"'\'']" \
               --include="*.py" \
               --exclude-dir=".git" \
               --exclude-dir="__pycache__" \
               --exclude-dir="venv" \
               --exclude-dir=".venv" \
               --exclude-dir="test_minimal_env" \
               . | grep -v "os.getenv\|os.environ\|getenv\|import\|def \|class \|# \|fallback\|example\|dummy\|test\|mock" \
               > /dev/null; then
            echo "❌ Potential hardcoded secrets found!"
            echo "Please use environment variables instead."
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi
        '
        language: system
        pass_filenames: false
        
      - id: check-env-example
        name: Check .env.example for real secrets
        entry: bash -c '
          if [ -f ".env.example" ]; then
            if grep -E "=.+[a-zA-Z0-9]{20,}" .env.example | grep -v "your-.*-here" > /dev/null; then
              echo "❌ .env.example appears to contain actual secret values!"
              echo "It should only contain placeholder values like '\''your-secret-here'\''"
              exit 1
            fi
          fi
        '
        language: system
        pass_filenames: false
        files: '\.env\.example$'

  # Python code quality
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.13
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: ['-r', 'app/', '-f', 'json', '-ll']
        exclude: 'test_.*\.py|.*_test\.py'

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: detect-private-key